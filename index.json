
[{"content":"","date":"4 December 2024","externalUrl":null,"permalink":"/categories/blog/","section":"Categories","summary":"","title":"Blog","type":"categories"},{"content":"","date":"4 December 2024","externalUrl":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":"","date":"4 December 2024","externalUrl":null,"permalink":"/tags/cloud-native/","section":"Tags","summary":"","title":"Cloud-Native","type":"tags"},{"content":"","date":"4 December 2024","externalUrl":null,"permalink":"/","section":"Gwen's Blog","summary":"","title":"Gwen's Blog","type":"page"},{"content":"","date":"4 December 2024","externalUrl":null,"permalink":"/tags/kubernetes/","section":"Tags","summary":"","title":"Kubernetes","type":"tags"},{"content":"\rKubernetes #\r概念 #\rkubernetes具有以下特性：\n服务发现和负载均衡 Kubernetes 可以使用 DNS 名称或自己的 IP 地址公开容器，如果进入容器的流量很大， Kubernetes 可以负载均衡并分配网络流量，从而使部署稳定。 存储编排 Kubernetes 允许你自动挂载你选择的存储系统，例如本地存储、公共云提供商等。 自动部署和回滚 你可以使用 Kubernetes 描述已部署容器的所需状态，它可以以受控的速率将实际状态 更改为期望状态。例如，你可以自动化 Kubernetes 来为你的部署创建新容器， 删除现有容器并将它们的所有资源用于新容器。 自动完成装箱计算 Kubernetes 允许你指定每个容器所需 CPU 和内存（RAM）。 当容器指定了资源请求时，Kubernetes 可以做出更好的决策来管理容器的资源。 自我修复 Kubernetes 重新启动失败的容器、替换容器、杀死不响应用户定义的 运行状况检查的容器，并且在准备好服务之前不将其通告给客户端。 密钥与配置管理 Kubernetes 允许你存储和管理敏感信息，例如密码、OAuth 令牌和 ssh 密钥。 你可以在不重建容器镜像的情况下部署和更新密钥和应用程序配置，也无需在堆栈配置中暴露密钥。 Kubernetes 为你提供了一个可弹性运行分布式系统的框架。 Kubernetes 会满足你的扩展要求、故障转移、部署模式等。 例如，Kubernetes 可以轻松管理系统的 Canary 部署。\n架构 #\rKubernetes Cluster = N Master Node + N Worker Node：N主节点+N工作节点； N\u0026gt;=1\n形象比喻\nPod就类似于一个docker-compose，指定一个pod里面要启动什么服务，然后一键启动\nDeployment用来控制Pod，使Pod有多版本，自愈，扩缩容\nService能够将一组相同的Pod公开为网络服务，类似于docker端口映射，并且能够负载均衡\nIngress类似于Nginx或者网关，可以根据路由进行请求转发\nPV就是类似于Samba网络服务器，可以在服务器上选个目录，然后别的电脑可以把他挂载到本地\nPVC(Persistent Volume Claim)就是声明需要多大的持久卷，然后k8s给他按需分配。这个后面可以实现动态帮我们自己建文件夹，就不用我们手动创建了\n安装 #\r安装Docker #\rsudo yum remove docker* sudo yum install -y yum-utils #配置docker的yum地址 sudo yum-config-manager \\ --add-repo \\ http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo #安装指定版本 sudo yum install -y docker-ce-20.10.7 docker-ce-cli-20.10.7 containerd.io-1.4.6 #\t启动\u0026amp;开机启动docker systemctl enable docker --now # docker加速配置 sudo mkdir -p /etc/docker sudo tee /etc/docker/daemon.json \u0026lt;\u0026lt;-\u0026#39;EOF\u0026#39; { \u0026#34;registry-mirrors\u0026#34;: [\u0026#34;https://82m9ar63.mirror.aliyuncs.com\u0026#34;], \u0026#34;exec-opts\u0026#34;: [\u0026#34;native.cgroupdriver=systemd\u0026#34;], \u0026#34;log-driver\u0026#34;: \u0026#34;json-file\u0026#34;, \u0026#34;log-opts\u0026#34;: { \u0026#34;max-size\u0026#34;: \u0026#34;100m\u0026#34; }, \u0026#34;storage-driver\u0026#34;: \u0026#34;overlay2\u0026#34; } EOF sudo systemctl daemon-reload sudo systemctl restart docker 安装Kubernetes #\r基本环境\n#设置每个机器自己的hostname hostnamectl set-hostname xxx # 将 SELinux 设置为 permissive 模式（相当于将其禁用） sudo setenforce 0 sudo sed -i \u0026#39;s/^SELINUX=enforcing$/SELINUX=permissive/\u0026#39; /etc/selinux/config #关闭swap swapoff -a sed -ri \u0026#39;s/.*swap.*/#\u0026amp;/\u0026#39; /etc/fstab #允许 iptables 检查桥接流量 cat \u0026lt;\u0026lt;EOF | sudo tee /etc/modules-load.d/k8s.conf br_netfilter EOF cat \u0026lt;\u0026lt;EOF | sudo tee /etc/sysctl.d/k8s.conf net.bridge.bridge-nf-call-ip6tables = 1 net.bridge.bridge-nf-call-iptables = 1 EOF sudo sysctl --system 安装kubelet、kubeadm、kubectl\n#配置k8s的yum源地址 cat \u0026lt;\u0026lt;EOF | sudo tee /etc/yum.repos.d/kubernetes.repo [kubernetes] name=Kubernetes baseurl=http://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64 enabled=1 gpgcheck=0 repo_gpgcheck=0 gpgkey=http://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg http://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg EOF #安装 kubelet，kubeadm，kubectl sudo yum install -y kubelet-1.20.9 kubeadm-1.20.9 kubectl-1.20.9 #启动kubelet sudo systemctl enable --now kubelet #所有机器配置master域名 echo \u0026#34;172.31.0.4 k8s-master\u0026#34; \u0026gt;\u0026gt; /etc/hosts 初始化master节点 #\rkubeadm init \\ --apiserver-advertise-address=172.31.0.4 \\ --control-plane-endpoint=k8s-master \\ --image-repository registry.cn-hangzhou.aliyuncs.com/lfy_k8s_images \\ --kubernetes-version v1.20.9 \\ --service-cidr=10.96.0.0/16 \\ # service在这个子网下分配网址 --pod-network-cidr=192.168.0.0/16 # 到时候Pod就在这个子网下分配网址 结束之后，会提示下面的内容\nYour Kubernetes control-plane has initialized successfully! To start using your cluster, you need to run the following as a regular user: mkdir -p $HOME/.kube sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config sudo chown $(id -u):$(id -g) $HOME/.kube/config Alternatively, if you are the root user, you can run: export KUBECONFIG=/etc/kubernetes/admin.conf You should now deploy a pod network to the cluster. Run \u0026#34;kubectl apply -f [podnetwork].yaml\u0026#34; with one of the options listed at: https://kubernetes.io/docs/concepts/cluster-administration/addons/ You can now join any number of control-plane nodes by copying certificate authorities and service account keys on each node and then running the following as root: kubeadm join k8s-master:6443 --token 3vckmv.lvrl05xpyftbs177 \\ --discovery-token-ca-cert-hash sha256:1dc274fed24778f5c284229d9fcba44a5df11efba018f9664cf5e8ff77907240 \\ --control-plane Then you can join any number of worker nodes by running the following on each as root: kubeadm join k8s-master:6443 --token 3vckmv.lvrl05xpyftbs177 \\ --discovery-token-ca-cert-hash sha256:1dc274fed24778f5c284229d9fcba44a5df11efba018f9664cf5e8ff77907240 安装Calico网络插件 #\rCalico 是一种容器之间互通的网络方案\ncurl https://docs.projectcalico.org/manifests/calico.yaml -O kubectl apply -f calico.yaml KuberSphere #\r概念 #\rKubeSphere 愿景是打造一个以 Kubernetes 为内核的云原生分布式操作系统，它的架构可以非常方便地使第三方应用与云原生生态组件进行即插即用（plug-and-play）的集成，支持云原生应用在多云与多集群的统一分发和运维管理。\n安装 #\r开放端口 #\r服务 协议 起始端口 结束端口 备注 ssh TCP 22 etcd TCP 2379 2380 apiserver TCP 6443 calico TCP 9099 9100 bgp TCP 179 nodeport TCP 30000 32767 master TCP 10250 10258 dns TCP 53 dns UDP 53 metrics-server TCP 8443 local-registry TCP 5000 离线环境需要 local-apt TCP 5080 离线环境需要 rpcbind TCP 111 使用 NFS 作为持久化存储时需要 ipip IPENCAP/IPIP 使用 Calico 时需要 下载核心文件 #\rwget https://github.com/kubesphere/ks-installer/releases/download/v3.1.1/kubesphere-installer.yaml wget https://github.com/kubesphere/ks-installer/releases/download/v3.1.1/cluster-configuration.yaml 修改cluster-configuration #\r默认是最小化安装，可以手动开启日志、审计、告警、devops之类的热插拔组件，找到对应的toml配置设置为true即可\n安装 #\rkubectl apply -f kubesphere-installer.yaml kubectl apply -f cluster-configuration.yaml 查看安装进度用下面指令\nkubectl logs -n kubesphere-system $(kubectl get pod -n kubesphere-system -l app=ks-install -o jsonpath=\u0026#39;{.items[0].metadata.name}\u0026#39;) -f 访问任意机器的 30880端口\n账号 ： admin\n密码 ： P@88w0rd\n解决etcd监控证书找不到问题\nkubectl -n kubesphere-monitoring-system create secret generic kube-etcd-client-certs --from-file=etcd-client-ca.crt=/etc/kubernetes/pki/etcd/ca.crt --from-file=etcd-client.crt=/etc/kubernetes/pki/apiserver-etcd-client.crt --from-file=etcd-client.key=/etc/kubernetes/pki/apiserver-etcd-client.key 其余知识细节 #\r云原生实战——尚硅谷\nWest2笔记\n","date":"4 December 2024","externalUrl":null,"permalink":"/posts/cloud-native/k8s%E5%AD%A6%E4%B9%A0/","section":"Posts","summary":"Some basic instructions and knowledge about Kubernetes and KuberSphere","title":"Kubernetes Basics","type":"posts"},{"content":"","date":"4 December 2024","externalUrl":null,"permalink":"/tags/kubersphere/","section":"Tags","summary":"","title":"Kubersphere","type":"tags"},{"content":"","date":"4 December 2024","externalUrl":null,"permalink":"/categories/post/","section":"Categories","summary":"","title":"Post","type":"categories"},{"content":"","date":"4 December 2024","externalUrl":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"},{"content":"","date":"4 September 2022","externalUrl":null,"permalink":"/tags/ipsum/","section":"Tags","summary":"","title":"Ipsum","type":"tags"},{"content":"","date":"4 September 2022","externalUrl":null,"permalink":"/tags/lorem/","section":"Tags","summary":"","title":"Lorem","type":"tags"},{"content":"","date":"4 September 2022","externalUrl":null,"permalink":"/tags/post/","section":"Tags","summary":"","title":"Post","type":"tags"},{"content":"package main func main() { fmt.Println(\u0026#34;Fuck you world!\u0026#34;) } And java:\npublic class Test { public static void main(String[] args) { System.out.println(\u0026#34;FUCK YOU WORLD!\u0026#34;); } } ","date":"4 September 2022","externalUrl":null,"permalink":"/posts/go/test/","section":"Posts","summary":"我抄 农","title":"What's this?","type":"posts"},{"content":"","date":"13 June 2022","externalUrl":null,"permalink":"/posts/","section":"Posts","summary":"","title":"Posts","type":"posts"},{"content":"","externalUrl":null,"permalink":"/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"},{"content":"","externalUrl":null,"permalink":"/series/","section":"Series","summary":"","title":"Series","type":"series"}]