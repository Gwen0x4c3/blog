
[{"content":"","date":"29 December 2024","externalUrl":null,"permalink":"/blog/categories/blog/","section":"Categories","summary":"","title":"Blog","type":"categories"},{"content":"","date":"29 December 2024","externalUrl":null,"permalink":"/blog/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":"","date":"29 December 2024","externalUrl":null,"permalink":"/blog/","section":"Gwen's Blog","summary":"","title":"Gwen's Blog","type":"page"},{"content":"","date":"29 December 2024","externalUrl":null,"permalink":"/blog/tags/linux/","section":"Tags","summary":"","title":"Linux","type":"tags"},{"content":"\r使用场景 #\r我在用tar解压一个几百G的文件，开始解压的时候没有nohup，已经解压了一些内容了，不舍得终止重新解压，于是找到了下面的方法\n步骤 #\r你的机器不一定支持，可以先用下面的小脚本，新开个连接测试一下\nvim test ##### 输入下面内容 #!/bin/bash # 循环150次 for i in {1..150} do # 将当前数字展示并写入文件 echo $i echo $i \u0026gt;\u0026gt; output.txt # 休眠1秒 sleep 1 done echo \u0026#34;任务完成\u0026#34; ##### 输入上面内容 chmod +x ./test # 运行 ./test 然后测试下面的步骤\n挂起进程 #\r按下Ctrl+z ，把当前正在执行的进程挂起\n如果没有提示，可以输入jobs -l 查看作业和对应的PID\ngwen@server308:~/codes/python$ jobs -l [1]+ 626621 已停止 ./test 转移到后台执行 #\r主要是两个命令：bg 和 disown\n# 首先jobs -l列出当前暂停的任务 jobs -l # [1]+ 626718 已停止 ./test # 然后执行bg n，这个n是jobs显示的[1]+中括号里面的数字 # bg之后他就会在后台运行了，此时你可以在终端执行其他指令，可以正常输入 # 执行完bg后会发现控制台在正常输出数字，output.txt文件也在不断追加内容 bg 1 # [1]+ ./test \u0026amp; # 然后disown -h %n，n也是上面的数字，当前ssh连接断开后，作业也不会结束 disown -h %1 注意执行完bg后，不要直接断开连接，因为此时那个任务还是属于当前会话的，断开会话之后作业就终止了，还需要disown将这个作业与当前会话解除绑定，才能退出\n查看效果 #\r新建个连接，tail -f output.txt可以看到文件在不断变化\nps -ef |grep test，可以看到此时test的父进程可能还不是1，但是在断开原来启动作业的那个连接之后，父进程ID变成了1\n","date":"29 December 2024","externalUrl":null,"permalink":"/blog/posts/linux/linux%E5%B0%86%E6%AD%A3%E5%9C%A8%E6%89%A7%E8%A1%8C%E7%9A%84%E4%BB%BB%E5%8A%A1%E8%BD%AC%E7%A7%BB%E5%88%B0%E5%90%8E%E5%8F%B0/","section":"Posts","summary":"执行任务转到后台，断开ssh连接后仍继续执行","title":"linux将正在执行的任务转移到后台","type":"posts"},{"content":"","date":"29 December 2024","externalUrl":null,"permalink":"/blog/categories/post/","section":"Categories","summary":"","title":"Post","type":"categories"},{"content":"","date":"29 December 2024","externalUrl":null,"permalink":"/blog/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"},{"content":"","date":"4 December 2024","externalUrl":null,"permalink":"/blog/tags/cloud-native/","section":"Tags","summary":"","title":"Cloud-Native","type":"tags"},{"content":"","date":"4 December 2024","externalUrl":null,"permalink":"/blog/tags/kubernetes/","section":"Tags","summary":"","title":"Kubernetes","type":"tags"},{"content":"\rKubernetes #\r概念 #\rkubernetes具有以下特性：\n服务发现和负载均衡 Kubernetes 可以使用 DNS 名称或自己的 IP 地址公开容器，如果进入容器的流量很大， Kubernetes 可以负载均衡并分配网络流量，从而使部署稳定。 存储编排 Kubernetes 允许你自动挂载你选择的存储系统，例如本地存储、公共云提供商等。 自动部署和回滚 你可以使用 Kubernetes 描述已部署容器的所需状态，它可以以受控的速率将实际状态 更改为期望状态。例如，你可以自动化 Kubernetes 来为你的部署创建新容器， 删除现有容器并将它们的所有资源用于新容器。 自动完成装箱计算 Kubernetes 允许你指定每个容器所需 CPU 和内存（RAM）。 当容器指定了资源请求时，Kubernetes 可以做出更好的决策来管理容器的资源。 自我修复 Kubernetes 重新启动失败的容器、替换容器、杀死不响应用户定义的 运行状况检查的容器，并且在准备好服务之前不将其通告给客户端。 密钥与配置管理 Kubernetes 允许你存储和管理敏感信息，例如密码、OAuth 令牌和 ssh 密钥。 你可以在不重建容器镜像的情况下部署和更新密钥和应用程序配置，也无需在堆栈配置中暴露密钥。 Kubernetes 为你提供了一个可弹性运行分布式系统的框架。 Kubernetes 会满足你的扩展要求、故障转移、部署模式等。 例如，Kubernetes 可以轻松管理系统的 Canary 部署。\n架构 #\rKubernetes Cluster = N Master Node + N Worker Node：N主节点+N工作节点； N\u0026gt;=1\n形象比喻\nPod就类似于一个docker-compose，指定一个pod里面要启动什么服务，然后一键启动\nDeployment用来控制Pod，使Pod有多版本，自愈，扩缩容\nService能够将一组相同的Pod公开为网络服务，类似于docker端口映射，并且能够负载均衡\nIngress类似于Nginx或者网关，可以根据路由进行请求转发\nPV就是类似于Samba网络服务器，可以在服务器上选个目录，然后别的电脑可以把他挂载到本地\nPVC(Persistent Volume Claim)就是声明需要多大的持久卷，然后k8s给他按需分配。这个后面可以实现动态帮我们自己建文件夹，就不用我们手动创建了\n安装 #\r安装Docker #\rsudo yum remove docker* sudo yum install -y yum-utils #配置docker的yum地址 sudo yum-config-manager \\ --add-repo \\ http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo #安装指定版本 sudo yum install -y docker-ce-20.10.7 docker-ce-cli-20.10.7 containerd.io-1.4.6 #\t启动\u0026amp;开机启动docker systemctl enable docker --now # docker加速配置 sudo mkdir -p /etc/docker sudo tee /etc/docker/daemon.json \u0026lt;\u0026lt;-\u0026#39;EOF\u0026#39; { \u0026#34;registry-mirrors\u0026#34;: [\u0026#34;https://82m9ar63.mirror.aliyuncs.com\u0026#34;], \u0026#34;exec-opts\u0026#34;: [\u0026#34;native.cgroupdriver=systemd\u0026#34;], \u0026#34;log-driver\u0026#34;: \u0026#34;json-file\u0026#34;, \u0026#34;log-opts\u0026#34;: { \u0026#34;max-size\u0026#34;: \u0026#34;100m\u0026#34; }, \u0026#34;storage-driver\u0026#34;: \u0026#34;overlay2\u0026#34; } EOF sudo systemctl daemon-reload sudo systemctl restart docker 安装Kubernetes #\r基本环境\n#设置每个机器自己的hostname hostnamectl set-hostname xxx # 将 SELinux 设置为 permissive 模式（相当于将其禁用） sudo setenforce 0 sudo sed -i \u0026#39;s/^SELINUX=enforcing$/SELINUX=permissive/\u0026#39; /etc/selinux/config #关闭swap swapoff -a sed -ri \u0026#39;s/.*swap.*/#\u0026amp;/\u0026#39; /etc/fstab #允许 iptables 检查桥接流量 cat \u0026lt;\u0026lt;EOF | sudo tee /etc/modules-load.d/k8s.conf br_netfilter EOF cat \u0026lt;\u0026lt;EOF | sudo tee /etc/sysctl.d/k8s.conf net.bridge.bridge-nf-call-ip6tables = 1 net.bridge.bridge-nf-call-iptables = 1 EOF sudo sysctl --system 安装kubelet、kubeadm、kubectl\n#配置k8s的yum源地址 cat \u0026lt;\u0026lt;EOF | sudo tee /etc/yum.repos.d/kubernetes.repo [kubernetes] name=Kubernetes baseurl=http://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64 enabled=1 gpgcheck=0 repo_gpgcheck=0 gpgkey=http://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg http://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg EOF #安装 kubelet，kubeadm，kubectl sudo yum install -y kubelet-1.20.9 kubeadm-1.20.9 kubectl-1.20.9 #启动kubelet sudo systemctl enable --now kubelet #所有机器配置master域名 echo \u0026#34;172.31.0.4 k8s-master\u0026#34; \u0026gt;\u0026gt; /etc/hosts 初始化master节点 #\rkubeadm init \\ --apiserver-advertise-address=172.31.0.4 \\ --control-plane-endpoint=k8s-master \\ --image-repository registry.cn-hangzhou.aliyuncs.com/lfy_k8s_images \\ --kubernetes-version v1.20.9 \\ --service-cidr=10.96.0.0/16 \\ # service在这个子网下分配网址 --pod-network-cidr=192.168.0.0/16 # 到时候Pod就在这个子网下分配网址 结束之后，会提示下面的内容\nYour Kubernetes control-plane has initialized successfully! To start using your cluster, you need to run the following as a regular user: mkdir -p $HOME/.kube sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config sudo chown $(id -u):$(id -g) $HOME/.kube/config Alternatively, if you are the root user, you can run: export KUBECONFIG=/etc/kubernetes/admin.conf You should now deploy a pod network to the cluster. Run \u0026#34;kubectl apply -f [podnetwork].yaml\u0026#34; with one of the options listed at: https://kubernetes.io/docs/concepts/cluster-administration/addons/ You can now join any number of control-plane nodes by copying certificate authorities and service account keys on each node and then running the following as root: kubeadm join k8s-master:6443 --token 3vckmv.lvrl05xpyftbs177 \\ --discovery-token-ca-cert-hash sha256:1dc274fed24778f5c284229d9fcba44a5df11efba018f9664cf5e8ff77907240 \\ --control-plane Then you can join any number of worker nodes by running the following on each as root: kubeadm join k8s-master:6443 --token 3vckmv.lvrl05xpyftbs177 \\ --discovery-token-ca-cert-hash sha256:1dc274fed24778f5c284229d9fcba44a5df11efba018f9664cf5e8ff77907240 安装Calico网络插件 #\rCalico 是一种容器之间互通的网络方案\ncurl https://docs.projectcalico.org/manifests/calico.yaml -O kubectl apply -f calico.yaml KuberSphere #\r概念 #\rKubeSphere 愿景是打造一个以 Kubernetes 为内核的云原生分布式操作系统，它的架构可以非常方便地使第三方应用与云原生生态组件进行即插即用（plug-and-play）的集成，支持云原生应用在多云与多集群的统一分发和运维管理。\n安装 #\r开放端口 #\r服务 协议 起始端口 结束端口 备注 ssh TCP 22 etcd TCP 2379 2380 apiserver TCP 6443 calico TCP 9099 9100 bgp TCP 179 nodeport TCP 30000 32767 master TCP 10250 10258 dns TCP 53 dns UDP 53 metrics-server TCP 8443 local-registry TCP 5000 离线环境需要 local-apt TCP 5080 离线环境需要 rpcbind TCP 111 使用 NFS 作为持久化存储时需要 ipip IPENCAP/IPIP 使用 Calico 时需要 下载核心文件 #\rwget https://github.com/kubesphere/ks-installer/releases/download/v3.1.1/kubesphere-installer.yaml wget https://github.com/kubesphere/ks-installer/releases/download/v3.1.1/cluster-configuration.yaml 修改cluster-configuration #\r默认是最小化安装，可以手动开启日志、审计、告警、devops之类的热插拔组件，找到对应的toml配置设置为true即可\n安装 #\rkubectl apply -f kubesphere-installer.yaml kubectl apply -f cluster-configuration.yaml 查看安装进度用下面指令\nkubectl logs -n kubesphere-system $(kubectl get pod -n kubesphere-system -l app=ks-install -o jsonpath=\u0026#39;{.items[0].metadata.name}\u0026#39;) -f 访问任意机器的 30880端口\n账号 ： admin\n密码 ： P@88w0rd\n解决etcd监控证书找不到问题\nkubectl -n kubesphere-monitoring-system create secret generic kube-etcd-client-certs --from-file=etcd-client-ca.crt=/etc/kubernetes/pki/etcd/ca.crt --from-file=etcd-client.crt=/etc/kubernetes/pki/apiserver-etcd-client.crt --from-file=etcd-client.key=/etc/kubernetes/pki/apiserver-etcd-client.key 其余知识细节 #\r云原生实战——尚硅谷\nWest2笔记\n","date":"4 December 2024","externalUrl":null,"permalink":"/blog/posts/cloud-native/k8s%E5%AD%A6%E4%B9%A0/","section":"Posts","summary":"Some basic instructions and knowledge about Kubernetes and KuberSphere","title":"Kubernetes Basics","type":"posts"},{"content":"","date":"4 December 2024","externalUrl":null,"permalink":"/blog/tags/kubersphere/","section":"Tags","summary":"","title":"Kubersphere","type":"tags"},{"content":"","date":"5 May 2024","externalUrl":null,"permalink":"/blog/categories/blogs/","section":"Categories","summary":"","title":"Blogs","type":"categories"},{"content":"","date":"5 May 2024","externalUrl":null,"permalink":"/blog/categories/debug/","section":"Categories","summary":"","title":"Debug","type":"categories"},{"content":"报错：\ncom.github.tobato.fastdfs.exception.FdfsConnectException: 无法获取服务端连接资源：can\u0026rsquo;t create connection to/192.168.152.128:0\n很明显，他认为我storage的port是0，应该是23000才对。打断点，发现是\ncom.github.tobato.fastdfs.domain.proto.mapper.FdfsParamMapper将byte[]转为值的时候出的问题，IP的位数在最新版应该为46-1，在StorageNode中ip的max设置成了16-1，因此修改方法有两个：\n1、自己修改源码后mvn install\nclone一下源码 修改com.github.tobato.fastdfs.domain.proto.OtherConstants的FDFS_IPADDR_SIZE为46 mvn clean install 2、反射动态修改\n修改值的代码如下：\npublic static final int NEW_FDFS_IPADDR_SIZE = 46; @PostConstruct public void changePortSize() throws Exception { Class\u0026lt;?\u0026gt; storageNodeClass = Class.forName(\u0026#34;com.github.tobato.fastdfs.domain.fdfs.StorageNode\u0026#34;); // 替换为实际的类路径 Field ipField = storageNodeClass.getDeclaredField(\u0026#34;ip\u0026#34;); FdfsColumn fdfsColumnAnnotation = ipField.getAnnotation(FdfsColumn.class); InvocationHandler handler = Proxy.getInvocationHandler(fdfsColumnAnnotation); Field values = handler.getClass().getDeclaredField(\u0026#34;memberValues\u0026#34;); values.setAccessible(true); Map\u0026lt;String, Object\u0026gt; memberValues =(Map\u0026lt;String, Object\u0026gt;) values.get(handler); memberValues.put(\u0026#34;max\u0026#34;, NEW_FDFS_IPADDR_SIZE - 1); } 我此处将代码放到了FdfsConfig的@Configuration类中，你也可以直接放启动springboot的main函数里，或者static {}里，反正让这段代码执行就行了\n","date":"5 May 2024","externalUrl":null,"permalink":"/blog/posts/java/fastdfs-client%E8%8E%B7%E5%8F%96%E6%9C%80%E6%96%B0%E7%89%88fastdfs%E7%9A%84storage%E8%8A%82%E7%82%B9%E6%97%B6port%E4%B8%BA0/","section":"Posts","summary":"fastdfs-client获取最新版FastDFS的storage节点时port为0","title":"fastdfs-client获取最新版FastDFS的storage节点时port为0","type":"posts"},{"content":"","date":"5 May 2024","externalUrl":null,"permalink":"/blog/tags/java/","section":"Tags","summary":"","title":"Java","type":"tags"},{"content":"","date":"22 April 2024","externalUrl":null,"permalink":"/blog/tags/deep-learning/","section":"Tags","summary":"","title":"Deep-Learning","type":"tags"},{"content":"","date":"22 April 2024","externalUrl":null,"permalink":"/blog/categories/projects/","section":"Categories","summary":"","title":"Projects","type":"categories"},{"content":"","date":"22 April 2024","externalUrl":null,"permalink":"/blog/tags/python/","section":"Tags","summary":"","title":"Python","type":"tags"},{"content":"\r一、效果\u0026amp;准备工作 #\r1.效果 #\r没啥好说的，低质量复刻SAM官网 https://segment-anything.com/\nGithub：https://github.com/Gwen0x4c3/segment-anything-vue\n需要提一点：所有生成embedding和mask的操作都是python后端做的，计算mask不是onnxruntime-web实现的，前端只负责了把rle编码的mask解码后画到canvas上，会有几十毫秒的网络传输延迟。我不会react和typescript，官网F12里的源代码太难懂了，生成的svg总是与期望的不一样\n主页 #\r鼠标移动动态分割（Hover） #\rthrottle了一下，修改代码里的throttle delay，反应更快些，我觉得没必要已经够了，设置的150ms\n点选前景背景（Click） #\r蓝色前景，红色背景，对应clickType分别为1和0\n分割（Cut out object） #\r同官网，分割出该区域需要的最小矩形框部分\n分割所有（Everything） #\r随便做了下，实在做不出官网的效果，可能模型也有问题 ，我用的vit_b，懒得试了，这功能对我来说没卵用\n2.准备工作 #\r安装依赖 #\r前端使用了Vue3+ElementPlus（https://element-plus.org/zh-CN/#/zh-CN）+axios+lz-string，npm安装一下。\n后端是fastapi（https://fastapi.tiangolo.com/），FastAPI 依赖 Python 3.8 及更高版本。\n安装 FastAPI\npip install fastapi\r另外我们还需要一个 ASGI 服务器，生产环境可以使用 Uvicorn 或者 Hypercorn：\npip install \u0026quot;uvicorn[standard]\u0026quot;\r要用的js文件 #\r@/util/request.js\nimport axios from \u0026#34;axios\u0026#34;; import { ElMessage } from \u0026#34;element-plus\u0026#34;; axios.interceptors.request.use( config =\u0026gt; { return config; }, error =\u0026gt; { return Promise.reject(error); } ); axios.interceptors.response.use( response =\u0026gt; { if (response.data.success != null \u0026amp;\u0026amp; !response.data.success) { return Promise.reject(response.data) } return response.data; }, error =\u0026gt; { console.log(\u0026#39;error: \u0026#39;, error) ElMessage.error(\u0026#39; \u0026#39;); return Promise.reject(error); } ); export default axios; 然后在main.js中绑定\nimport axios from \u0026#39;./util/request.js\u0026#39; axios.defaults.baseURL = \u0026#39;http://localhost:9000\u0026#39; axios.defaults.headers.post[\u0026#39;Content-Type\u0026#39;] = \u0026#39;application/x-www-form-urlencoded\u0026#39;; app.config.globalProperties.$http = axios @/util/throttle.js\nfunction throttle(func, delay) { let timer = null; // 定时器变量 return function() { const context = this; // 保存this指向 const args = arguments; // 保存参数列表 if (!timer) { timer = setTimeout(() =\u0026gt; { func.apply(context, args); // 调用原始函数并传入上下文和参数 clearTimeout(timer); // 清除计时器 timer = null; // 重置计时器为null }, delay); } }; } export default throttle @/util/mask_utils.js\n/** * Parses RLE from compressed string * @param {Array\u0026lt;number\u0026gt;} input * @returns array of integers */ export const rleFrString = (input) =\u0026gt; { let result = []; let charIndex = 0; while (charIndex \u0026lt; input.length) { let value = 0, k = 0, more = 1; while (more) { let c = input.charCodeAt(charIndex) - 48; value |= (c \u0026amp; 0x1f) \u0026lt;\u0026lt; (5 * k); more = c \u0026amp; 0x20; charIndex++; k++; if (!more \u0026amp;\u0026amp; c \u0026amp; 0x10) value |= -1 \u0026lt;\u0026lt; (5 * k); } if (result.length \u0026gt; 2) value += result[result.length - 2]; result.push(value); } return result; }; /** * Parse RLE to mask array * @param rows * @param cols * @param counts * @returns {Uint8Array} */ export const decodeRleCounts = ([rows, cols], counts) =\u0026gt; { let arr = new Uint8Array(rows * cols) let i = 0 let flag = 0 for (let k of counts) { while (k-- \u0026gt; 0) { arr[i++] = flag } flag = (flag + 1) % 2 } return arr }; /** * Parse Everything mode counts array to mask array * @param rows * @param cols * @param counts * @returns {Uint8Array} */ export const decodeEverythingMask = ([rows, cols], counts) =\u0026gt; { let arr = new Uint8Array(rows * cols) let k = 0; for (let i = 0; i \u0026lt; counts.length; i += 2) { for (let j = 0; j \u0026lt; counts[i]; j++) { arr[k++] = counts[i + 1] } } return arr; }; /** * Get globally unique color in the mask * @param category * @param colorMap * @returns {*} */ export const getUniqueColor = (category, colorMap) =\u0026gt; { // 该种类没有颜色 if (!colorMap.hasOwnProperty(category)) { // 生成唯一的颜色 while (true) { const color = { r: Math.floor(Math.random() * 256), g: Math.floor(Math.random() * 256), b: Math.floor(Math.random() * 256) } // 检查颜色映射中是否已存在相同的颜色 const existingColors = Object.values(colorMap); const isDuplicateColor = existingColors.some((existingColor) =\u0026gt; { return color.r === existingColor.r \u0026amp;\u0026amp; color.g === existingColor.g \u0026amp;\u0026amp; color.b === existingColor.b; }); // 如果不存在相同颜色，结束循环 if (!isDuplicateColor) { colorMap[category] = color; break } } console.log(\u0026#34;生成唯一颜色\u0026#34;, category, colorMap[category]) return colorMap[category] } else { return colorMap[category] } } /** * Cut out specific area of image uncovered by mask * @param w image\u0026#39;s natural width * @param h image\u0026#39;s natural height * @param image source image * @param canvas mask canvas * @param callback function to solve the image blob */ export const cutOutImage = ({w, h}, image, canvas, callback) =\u0026gt; { const resultCanvas = document.createElement(\u0026#39;canvas\u0026#39;), resultCtx = resultCanvas.getContext(\u0026#39;2d\u0026#39;, {willReadFrequently: true}), originalCtx = canvas.getContext(\u0026#39;2d\u0026#39;, {willReadFrequently: true}); resultCanvas.width = w; resultCanvas.height = h; resultCtx.drawImage(image, 0, 0, w, h) const maskDataArray = originalCtx.getImageData(0, 0, w, h).data; const imageData = resultCtx.getImageData(0, 0, w, h); const imageDataArray = imageData.data // 将mask的部分去掉 for (let i = 0; i \u0026lt; maskDataArray.length; i += 4) { const alpha = maskDataArray[i + 3]; if (alpha !== 0) { // 不等于0，是mask区域 imageDataArray[i + 3] = 0; } } // 计算被分割出来的部分的矩形框 let minX = w; let minY = h; let maxX = 0; let maxY = 0; for (let y = 0; y \u0026lt; h; y++) { for (let x = 0; x \u0026lt; w; x++) { const alpha = imageDataArray[(y * w + x) * 4 + 3]; if (alpha !== 0) { minX = Math.min(minX, x); minY = Math.min(minY, y); maxX = Math.max(maxX, x); maxY = Math.max(maxY, y); } } } const width = maxX - minX + 1; const height = maxY - minY + 1; const startX = minX; const startY = minY; resultCtx.putImageData(imageData, 0, 0) // 创建一个新的canvas来存储特定区域的图像 const croppedCanvas = document.createElement(\u0026#34;canvas\u0026#34;); const croppedContext = croppedCanvas.getContext(\u0026#34;2d\u0026#34;); croppedCanvas.width = width; croppedCanvas.height = height; // 将特定区域绘制到新canvas上 croppedContext.drawImage(resultCanvas, startX, startY, width, height, 0, 0, width, height); croppedCanvas.toBlob(blob =\u0026gt; { if (callback) { callback(blob) } }, \u0026#34;image/png\u0026#34;); } /** * Cut out specific area of image covered by target color mask * PS: 我写的这代码有问题，比较color的时候tmd明明mask canvas中有这个颜色， * 就是说不存在这颜色，所以不用这个函数，改成下面的了 * @param w image\u0026#39;s natural width * @param h image\u0026#39;s natural height * @param image source image * @param canvas mask canvas * @param color target color * @param callback function to solve the image blob */ export const cutOutImageWithMaskColor = ({w, h}, image, canvas, color, callback) =\u0026gt; { const resultCanvas = document.createElement(\u0026#39;canvas\u0026#39;), resultCtx = resultCanvas.getContext(\u0026#39;2d\u0026#39;, {willReadFrequently: true}), originalCtx = canvas.getContext(\u0026#39;2d\u0026#39;, {willReadFrequently: true}); resultCanvas.width = w; resultCanvas.height = h; resultCtx.drawImage(image, 0, 0, w, h) const maskDataArray = originalCtx.getImageData(0, 0, w, h).data; const imageData = resultCtx.getImageData(0, 0, w, h); const imageDataArray = imageData.data let find = false // 比较mask的color和目标color for (let i = 0; i \u0026lt; maskDataArray.length; i += 4) { const r = maskDataArray[i], g = maskDataArray[i + 1], b = maskDataArray[i + 2]; if (r != color.r || g != color.g || b != color.b) { // 颜色与目标颜色不相同，是mask区域 // 设置alpha为0 imageDataArray[i + 3] = 0; } else { find = true } } // 计算被分割出来的部分的矩形框 let minX = w; let minY = h; let maxX = 0; let maxY = 0; for (let y = 0; y \u0026lt; h; y++) { for (let x = 0; x \u0026lt; w; x++) { const alpha = imageDataArray[(y * w + x) * 4 + 3]; if (alpha !== 0) { minX = Math.min(minX, x); minY = Math.min(minY, y); maxX = Math.max(maxX, x); maxY = Math.max(maxY, y); } } } const width = maxX - minX + 1; const height = maxY - minY + 1; const startX = minX; const startY = minY; // console.log(`矩形宽度：${width}`); // console.log(`矩形高度：${height}`); // console.log(`起点坐标：(${startX}, ${startY})`); resultCtx.putImageData(imageData, 0, 0) // 创建一个新的canvas来存储特定区域的图像 const croppedCanvas = document.createElement(\u0026#34;canvas\u0026#34;); const croppedContext = croppedCanvas.getContext(\u0026#34;2d\u0026#34;); croppedCanvas.width = width; croppedCanvas.height = height; // 将特定区域绘制到新canvas上 croppedContext.drawImage(resultCanvas, startX, startY, width, height, 0, 0, width, height); croppedCanvas.toBlob(blob =\u0026gt; { if (callback) { callback(blob) } }, \u0026#34;image/png\u0026#34;); } /** * Cut out specific area whose category is target category * @param w image\u0026#39;s natural width * @param h image\u0026#39;s natural height * @param image source image * @param arr original mask array that stores all pixel\u0026#39;s category * @param category target category * @param callback function to solve the image blob */ export const cutOutImageWithCategory = ({w, h}, image, arr, category, callback) =\u0026gt; { const resultCanvas = document.createElement(\u0026#39;canvas\u0026#39;), resultCtx = resultCanvas.getContext(\u0026#39;2d\u0026#39;, {willReadFrequently: true}); resultCanvas.width = w; resultCanvas.height = h; resultCtx.drawImage(image, 0, 0, w, h) const imageData = resultCtx.getImageData(0, 0, w, h); const imageDataArray = imageData.data // 比较mask的类别和目标类别 let i = 0 for(let y = 0; y \u0026lt; h; y++){ for(let x = 0; x \u0026lt; w; x++){ if (category != arr[i++]) { // 类别不相同，是mask区域 // 设置alpha为0 imageDataArray[3 + (w * y + x) * 4] = 0; } } } // 计算被分割出来的部分的矩形框 let minX = w; let minY = h; let maxX = 0; let maxY = 0; for (let y = 0; y \u0026lt; h; y++) { for (let x = 0; x \u0026lt; w; x++) { const alpha = imageDataArray[(y * w + x) * 4 + 3]; if (alpha !== 0) { minX = Math.min(minX, x); minY = Math.min(minY, y); maxX = Math.max(maxX, x); maxY = Math.max(maxY, y); } } } const width = maxX - minX + 1; const height = maxY - minY + 1; const startX = minX; const startY = minY; resultCtx.putImageData(imageData, 0, 0) // 创建一个新的canvas来存储特定区域的图像 const croppedCanvas = document.createElement(\u0026#34;canvas\u0026#34;); const croppedContext = croppedCanvas.getContext(\u0026#34;2d\u0026#34;); croppedCanvas.width = width; croppedCanvas.height = height; // 将特定区域绘制到新canvas上 croppedContext.drawImage(resultCanvas, startX, startY, width, height, 0, 0, width, height); croppedCanvas.toBlob(blob =\u0026gt; { if (callback) { callback(blob) } }, \u0026#34;image/png\u0026#34;); } 二、后端代码 #\r1.SAM下载 #\r首先从github上下载SAM的代码https://github.com/facebookresearch/segment-anything\n然后下载模型文件，保存到项目根目录/checkpoints中，\ndefault or vit_h: ViT-H SAM model. vit_l: ViT-L SAM model. vit_b: ViT-B SAM model. 2.后端代码 #\r在项目根目录下创建main.py\nmain.py\nimport os import time from PIL import Image import numpy as np import io import base64 from segment_anything import SamPredictor, SamAutomaticMaskGenerator, sam_model_registry from pycocotools import mask as mask_utils import lzstring ​ def init(): # your model path checkpoint = \u0026#34;checkpoints/sam_vit_b_01ec64.pth\u0026#34; model_type = \u0026#34;vit_b\u0026#34; sam = sam_model_registry[model_type](checkpoint=checkpoint) sam.to(device=\u0026#39;cuda\u0026#39;) predictor = SamPredictor(sam) mask_generator = SamAutomaticMaskGenerator(sam) return predictor, mask_generator ​ predictor, mask_generator = init() from fastapi import FastAPI from fastapi.middleware.cors import CORSMiddleware app = FastAPI() app.add_middleware( CORSMiddleware, allow_origins=\u0026#34;*\u0026#34;, allow_credentials=True, allow_methods=[\u0026#34;*\u0026#34;], allow_headers=[\u0026#34;*\u0026#34;], ) last_image = \u0026#34;\u0026#34; last_logit = None ​ @app.post(\u0026#34;/segment\u0026#34;) def process_image(body: dict): global last_image, last_logit print(\u0026#34;start processing image\u0026#34;, time.time()) path = body[\u0026#34;path\u0026#34;] is_first_segment = False # 看上次分割的图片是不是该图片 if path != last_image: # 不是该图片，重新生成图像embedding pil_image = Image.open(path) np_image = np.array(pil_image) predictor.set_image(np_image) last_image = path is_first_segment = True print(\u0026#34;第一次识别该图片，获取embedding\u0026#34;) # 获取mask clicks = body[\u0026#34;clicks\u0026#34;] input_points = [] input_labels = [] for click in clicks: input_points.append([click[\u0026#34;x\u0026#34;], click[\u0026#34;y\u0026#34;]]) input_labels.append(click[\u0026#34;clickType\u0026#34;]) print(\u0026#34;input_points:{}, input_labels:{}\u0026#34;.format(input_points, input_labels)) input_points = np.array(input_points) input_labels = np.array(input_labels) masks, scores, logits = predictor.predict( point_coords=input_points, point_labels=input_labels, mask_input=last_logit[None, :, :] if not is_first_segment else None, multimask_output=is_first_segment # 第一次产生3个结果，选择最优的 ) # 设置mask_input，为下一次做准备 best = np.argmax(scores) last_logit = logits[best, :, :] masks = masks[best, :, :] # print(mask_utils.encode(np.asfortranarray(masks))[\u0026#34;counts\u0026#34;]) # numpy_array = np.frombuffer(mask_utils.encode(np.asfortranarray(masks))[\u0026#34;counts\u0026#34;], dtype=np.uint8) # print(\u0026#34;Uint8Array([\u0026#34; + \u0026#34;, \u0026#34;.join(map(str, numpy_array)) + \u0026#34;])\u0026#34;) source_mask = mask_utils.encode(np.asfortranarray(masks))[\u0026#34;counts\u0026#34;].decode(\u0026#34;utf-8\u0026#34;) # print(source_mask) lzs = lzstring.LZString() encoded = lzs.compressToEncodedURIComponent(source_mask) print(\u0026#34;process finished\u0026#34;, time.time()) return {\u0026#34;shape\u0026#34;: masks.shape, \u0026#34;mask\u0026#34;: encoded} ​ @app.get(\u0026#34;/everything\u0026#34;) def segment_everything(path: str): start_time = time.time() print(\u0026#34;start segment_everything\u0026#34;, start_time) pil_image = Image.open(path) np_image = np.array(pil_image) masks = mask_generator.generate(np_image) sorted_anns = sorted(masks, key=(lambda x: x[\u0026#39;area\u0026#39;]), reverse=True) img = np.zeros((sorted_anns[0][\u0026#39;segmentation\u0026#39;].shape[0], sorted_anns[0][\u0026#39;segmentation\u0026#39;].shape[1]), dtype=np.uint8) for idx, ann in enumerate(sorted_anns, 0): img[ann[\u0026#39;segmentation\u0026#39;]] = idx #看一下mask是什么样 #plt.figure(figsize=(10,10)) #plt.imshow(img) #plt.show() # 压缩数组 result = my_compress(img) end_time = time.time() print(\u0026#34;finished segment_everything\u0026#34;, end_time) print(\u0026#34;time cost\u0026#34;, end_time - start_time) return {\u0026#34;shape\u0026#34;: img.shape, \u0026#34;mask\u0026#34;: result} ​ @app.get(\u0026#39;/automatic_masks\u0026#39;) def automatic_masks(path: str): pil_image = Image.open(path) np_image = np.array(pil_image) mask = mask_generator.generate(np_image) sorted_anns = sorted(mask, key=(lambda x: x[\u0026#39;area\u0026#39;]), reverse=True) lzs = lzstring.LZString() res = [] for ann in sorted_anns: m = ann[\u0026#39;segmentation\u0026#39;] source_mask = mask_utils.encode(m)[\u0026#39;counts\u0026#39;].decode(\u0026#34;utf-8\u0026#34;) encoded = lzs.compressToEncodedURIComponent(source_mask) r = { \u0026#34;encodedMask\u0026#34;: encoded, \u0026#34;point_coord\u0026#34;: ann[\u0026#39;point_coords\u0026#39;][0], } res.append(r) return res ​ # 就是将连续的数字统计个数，然后把[个数，数字]放到result中，类似rle算法 # 比如[[1,1,1,2,3,2,2,4,4],[3,3,4...]] # result是[3,1, 1,2, 1,3, 2,2, 2,4, 2,3,...] def my_compress(img): result = [] last_pixel = img[0][0] count = 0 for line in img: for pixel in line: if pixel == last_pixel: count += 1 else: result.append(count) result.append(int(last_pixel)) last_pixel = pixel count = 1 result.append(count) result.append(int(last_pixel)) return result 3.原神启动 #\r在cmd或者pycharm终端，cd到项目根目录下，输入uvicorn main:app \u0026ndash;port 8006，启动服务器\n三、前端代码 #\r1.页面代码 #\rtemplate #\r\u0026lt;template\u0026gt; \u0026lt;div class=\u0026#34;segment-container\u0026#34;\u0026gt; \u0026lt;ElScrollbar class=\u0026#34;tool-box\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;image-section\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;title\u0026#34;\u0026gt; \u0026lt;div style=\u0026#34;padding-left:15px\u0026#34;\u0026gt; \u0026lt;el-icon\u0026gt;\u0026lt;Picture /\u0026gt;\u0026lt;/el-icon\u0026gt;\u0026lt;span style=\u0026#34;font-size: 18px;font-weight: 550;\u0026#34;\u0026gt;展示图像\u0026lt;/span\u0026gt; \u0026lt;el-icon class=\u0026#34;header-icon\u0026#34;\u0026gt;\u0026lt;/el-icon\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;ElScrollbar height=\u0026#34;350px\u0026#34;\u0026gt; \u0026lt;div v-if=\u0026#34;cutOuts.length === 0\u0026#34;\u0026gt; \u0026lt;p\u0026gt;未进行抠图\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;左键设置区域为前景\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;右键设置区域为背景\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;img v-for=\u0026#34;src in cutOuts\u0026#34; :src=\u0026#34;src\u0026#34; alt=\u0026#34;加载中\u0026#34; @click=\u0026#34;openInNewTab(src)\u0026#34;/\u0026gt; \u0026lt;/ElScrollbar\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;options-section\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;option\u0026#34; @click=\u0026#34;reset\u0026#34;\u0026gt;重置\u0026lt;/span\u0026gt; \u0026lt;span :class=\u0026#34;\u0026#39;option\u0026#39;+(clicks.length===0?\u0026#39; disabled\u0026#39;:\u0026#39;\u0026#39;)\u0026#34; @click=\u0026#34;undo\u0026#34;\u0026gt;撤销\u0026lt;/span\u0026gt; \u0026lt;span :class=\u0026#34;\u0026#39;option\u0026#39;+(clickHistory.length===0?\u0026#39; disabled\u0026#39;:\u0026#39;\u0026#39;)\u0026#34; @click=\u0026#34;redo\u0026#34;\u0026gt;恢复\u0026lt;/span\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;button :class=\u0026#34;\u0026#39;segmentation-button\u0026#39;+(lock||clicks.length===0?\u0026#39; disabled\u0026#39;:\u0026#39;\u0026#39;)\u0026#34; @click=\u0026#34;cutImage\u0026#34;\u0026gt;分割\u0026lt;/button\u0026gt; \u0026lt;button :class=\u0026#34;\u0026#39;segmentation-button\u0026#39;+(lock||isEverything?\u0026#39; disabled\u0026#39;:\u0026#39;\u0026#39;)\u0026#34; @click=\u0026#34;segmentEverything\u0026#34;\u0026gt;分割所有\u0026lt;/button\u0026gt; \u0026lt;/ElScrollbar\u0026gt; \u0026lt;div class=\u0026#34;segment-box\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;segment-wrapper\u0026#34; :style=\u0026#34;{\u0026#39;left\u0026#39;: left + \u0026#39;px\u0026#39;}\u0026#34;\u0026gt; \u0026lt;img v-show=\u0026#34;path\u0026#34; id=\u0026#34;segment-image\u0026#34; :src=\u0026#34;url\u0026#34; :style=\u0026#34;{width:w, height:h}\u0026#34; alt=\u0026#34;加载失败\u0026#34; crossorigin=\u0026#34;anonymous\u0026#34; @mousedown=\u0026#34;handleMouseDown\u0026#34; @mouseenter=\u0026#34;canvasVisible = true\u0026#34; @mouseout=\u0026#34;() =\u0026gt; {if (!this.clicks.length\u0026amp;\u0026amp;!this.isEverything) this.canvasVisible = false}\u0026#34;/\u0026gt; \u0026lt;canvas v-show=\u0026#34;path \u0026amp;\u0026amp; canvasVisible\u0026#34; id=\u0026#34;segment-canvas\u0026#34; :width=\u0026#34;originalSize.w\u0026#34; :height=\u0026#34;originalSize.h\u0026#34;\u0026gt;\u0026lt;/canvas\u0026gt; \u0026lt;div id=\u0026#34;point-box\u0026#34; :style=\u0026#34;{width:w, height:h}\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; script #\r\u0026lt;script\u0026gt; import throttle from \u0026#34;@/util/throttle\u0026#34;; import LZString from \u0026#34;lz-string\u0026#34;; import { rleFrString, decodeRleCounts, decodeEverythingMask, getUniqueColor, cutOutImage, cutOutImageWithMaskColor, cutOutImageWithCategory } from \u0026#34;@/util/mask_utils\u0026#34;; import {ElCollapse, ElCollapseItem, ElScrollbar} from \u0026#34;element-plus\u0026#34;; import {Picture} from \u0026#39;@element-plus/icons-vue\u0026#39; export default { name: \u0026#34;segment\u0026#34;, components: { ElCollapse, ElCollapseItem, ElScrollbar, Picture }, data() { return { image: null, clicks: [], clickHistory: [], originalSize: {w: 0, h: 0}, w: 0, h: 0, left: 0, scale: 1, url: null, // url用来设置成img的src展示 path: null, // path是该图片在文件系统中的绝对路径 loading: false, lock: false, canvasVisible: true, // cutOuts: [\u0026#39;http://localhost:9000/p/2024/01/19/112ce48bd76e47c7900863a3a0147853.jpg\u0026#39;, \u0026#39;http://localhost:9000/p/2024/01/19/112ce48bd76e47c7900863a3a0147853.jpg\u0026#39;], cutOuts: [], isEverything: false } }, mounted() { this.init() }, methods: { async init() { this.loading = true // 从路由获取id let id = this.$route.params.id if (!id) { this.$message.error(\u0026#39;未选择图片\u0026#39;) return } this.id = id // 获取图片信息 try { const { path, url } = await this.getPathAndUrl() this.loadImage(path, url) } catch (e) { console.error(e) this.$message.error(e) } }, async getPathAndUrl() { let res = await this.$http.get(\u0026#34;/photo/path/\u0026#34; + this.id) console.log(res) return res.data }, loadImage(path, url) { let image = new Image(); image.src = this.$photo_base + url; image.onload = () =\u0026gt; { let w = image.width, h = image.height let nw, nh let body = document.querySelector(\u0026#39;.segment-box\u0026#39;) let mw = body.clientWidth, mh = body.clientHeight let ratio = w / h if (ratio * mh \u0026gt; mw) { nw = mw nh = mw / ratio } else { nh = mh nw = ratio * mh } this.originalSize = {w, h} nw = parseInt(nw) nh = parseInt(nh) this.w = nw + \u0026#39;px\u0026#39; this.h = nh + \u0026#39;px\u0026#39; this.left = (mw - nw) / 2 this.scale = nw / w this.url = this.$photo_base + url this.path = path console.log((this.scale \u0026gt; 1 ? \u0026#39;放大\u0026#39; : \u0026#39;缩小\u0026#39;) + w + \u0026#39; --\u0026gt; \u0026#39; + nw) const img = document.getElementById(\u0026#39;segment-image\u0026#39;) img.addEventListener(\u0026#39;contextmenu\u0026#39;, e =\u0026gt; e.preventDefault()) img.addEventListener(\u0026#39;mousemove\u0026#39;, throttle(this.handleMouseMove, 150)) const canvas = document.getElementById(\u0026#39;segment-canvas\u0026#39;) canvas.style.transform = `scale(${this.scale})` } }, getClick(e) { let click = { x: e.offsetX, y: e.offsetY, } const imageScale = this.scale click.x /= imageScale; click.y /= imageScale; if(e.which === 3){ // 右键 click.clickType = 0 } else if(e.which === 1 || e.which === 0) { // 左键 click.clickType = 1 } return click }, handleMouseMove(e) { if (this.isEverything) { // 分割所有模式，返回 return; } if (this.clicks.length !== 0) { // 选择了点 return; } if (this.lock) { return; } this.lock = true; let click = this.getClick(e); requestIdleCallback(() =\u0026gt; { this.getMask([click]) }) }, handleMouseDown(e) { e.preventDefault(); e.stopPropagation(); if (e.button === 1) { return; } // 如果是“分割所有”模式，返回 if (this.isEverything) { return; } if (this.lock) { return; } this.lock = true let click = this.getClick(e); this.placePoint(e.offsetX, e.offsetY, click.clickType) this.clicks.push(click); requestIdleCallback(() =\u0026gt; { this.getMask() }) }, placePoint(x, y, clickType) { let box = document.getElementById(\u0026#39;point-box\u0026#39;) let point = document.createElement(\u0026#39;div\u0026#39;) point.className = \u0026#39;segment-point\u0026#39; + (clickType ? \u0026#39;\u0026#39; : \u0026#39; negative\u0026#39;) point.style = `position: absolute; width: 10px; height: 10px; border-radius: 50%; background-color: ${clickType?\u0026#39;#409EFF\u0026#39;:\u0026#39;#F56C6C \u0026#39;}; left: ${x-5}px; top: ${y-5}px` // 点的id是在clicks数组中的下标索引 point.id = \u0026#39;point-\u0026#39; + this.clicks.length box.appendChild(point) }, removePoint(i) { const selector = \u0026#39;point-\u0026#39; + i let point = document.getElementById(selector) if (point != null) { point.remove() } }, getMask(clicks) { // 如果clicks为空，则是mouse move产生的click if (clicks == null) { clicks = this.clicks } const data = { path: this.path, clicks: clicks } console.log(data) this.$http.post(\u0026#39;http://localhost:8006/segment\u0026#39;, data, { headers: { \u0026#34;Content-Type\u0026#34;: \u0026#34;application/json\u0026#34; } }).then(res =\u0026gt; { const shape = res.shape const maskenc = LZString.decompressFromEncodedURIComponent(res.mask); const decoded = rleFrString(maskenc) this.drawCanvas(shape, decodeRleCounts(shape, decoded)) this.lock = false }).catch(err =\u0026gt; { console.error(err) this.$message.error(\u0026#34;生成失败\u0026#34;) this.lock = false }) }, segmentEverything() { if (this.isEverything) { // 上一次刚点过了 return; } if (this.lock) { return; } this.lock = true this.reset() this.isEverything = true this.canvasVisible = true this.$http.get(\u0026#34;http://localhost:8006/everything?path=\u0026#34; + this.path).then(res =\u0026gt; { const shape = res.shape const counts = res.mask this.drawEverythingCanvas(shape, decodeEverythingMask(shape, counts)) }).catch(err =\u0026gt; { console.error(err) this.$message.error(\u0026#34;生成失败\u0026#34;) }) }, drawCanvas(shape, arr) { let height = shape[0], width = shape[1] console.log(\u0026#34;height: \u0026#34;, height, \u0026#34; width: \u0026#34;, width) let canvas = document.getElementById(\u0026#39;segment-canvas\u0026#39;), canvasCtx = canvas.getContext(\u0026#34;2d\u0026#34;), imgData = canvasCtx.getImageData(0, 0, width, height), pixelData = imgData.data let i = 0 for(let x = 0; x \u0026lt; width; x++){ for(let y = 0; y \u0026lt; height; y++){ if (arr[i++] === 0) { // 如果是0，是背景，遮住 pixelData[0 + (width * y + x) * 4] = 40; pixelData[1 + (width * y + x) * 4] = 40; pixelData[2 + (width * y + x) * 4] = 40; pixelData[3 + (width * y + x) * 4] = 190; } else { pixelData[3 + (width * y + x) * 4] = 0; } } } canvasCtx.putImageData(imgData, 0, 0) }, drawEverythingCanvas(shape, arr) { const height = shape[0], width = shape[1] console.log(\u0026#34;height: \u0026#34;, height, \u0026#34; width: \u0026#34;, width) let canvas = document.getElementById(\u0026#39;segment-canvas\u0026#39;), canvasCtx = canvas.getContext(\u0026#34;2d\u0026#34;), imgData = canvasCtx.getImageData(0, 0, width, height), pixelData = imgData.data; const colorMap = {} let i = 0 for(let y = 0; y \u0026lt; height; y++){ for(let x = 0; x \u0026lt; width; x++){ const category = arr[i++] const color = getUniqueColor(category, colorMap) pixelData[0 + (width * y + x) * 4] = color.r; pixelData[1 + (width * y + x) * 4] = color.g; pixelData[2 + (width * y + x) * 4] = color.b; pixelData[3 + (width * y + x) * 4] = 150; } } // 显示在图片上 canvasCtx.putImageData(imgData, 0, 0) // 开始分割每一个mask的图片 const image = document.getElementById(\u0026#39;segment-image\u0026#39;) Object.keys(colorMap).forEach(category =\u0026gt; { cutOutImageWithCategory(this.originalSize, image, arr, category, blob =\u0026gt; { const url = URL.createObjectURL(blob); this.cutOuts = [url, ...this.cutOuts] }) }) }, reset() { for (let i = 0; i \u0026lt; this.clicks.length; i++) { this.removePoint(i) } this.clicks = [] this.clickHistory = [] this.isEverything = false this.clearCanvas() }, undo() { if (this.clicks.length === 0) return const idx = this.clicks.length - 1 const click = this.clicks[idx] this.clickHistory.push(click) this.clicks.splice(idx, 1) this.removePoint(idx) if (this.clicks.length) { this.getMask() } else { this.clearCanvas() } }, redo() { if (this.clickHistory.length === 0) return const idx = this.clickHistory.length - 1 const click = this.clickHistory[idx] console.log(this.clicks, this.clickHistory, click) this.placePoint(click.x * this.scale, click.y * this.scale, click.clickType) this.clicks.push(click) this.clickHistory.splice(idx, 1) this.getMask() }, clearCanvas() { let canvas = document.getElementById(\u0026#39;segment-canvas\u0026#39;) canvas.getContext(\u0026#39;2d\u0026#39;).clearRect(0, 0, canvas.width, canvas.height) }, cutImage() { if (this.lock || this.clicks.length === 0) { return; } const canvas = document.getElementById(\u0026#39;segment-canvas\u0026#39;), image = document.getElementById(\u0026#39;segment-image\u0026#39;) const {w, h} = this.originalSize cutOutImage(this.originalSize, image, canvas, blob =\u0026gt; { const url = URL.createObjectURL(blob); this.cutOuts = [url, ...this.cutOuts] // 不需要之后用下面的清除文件 // URL.revokeObjectURL(url); }) }, openInNewTab(src) { window.open(src, \u0026#39;_blank\u0026#39;) } } } \u0026lt;/script\u0026gt; style #\r\u0026lt;style scoped lang=\u0026#34;scss\u0026#34;\u0026gt; .segment-container { position: relative; } .tool-box { position: absolute; left: 20px; top: 20px; width: 200px; height: 600px; border-radius: 20px; //background: pink; overflow: auto; box-shadow: 0 0 5px rgb(150, 150, 150); box-sizing: border-box; padding: 10px; .image-section { height: fit-content; width: 100%; .title { height: 48px; line-height: 48px; border-bottom: 1px solid lightgray; margin-bottom: 15px; } } .image-section img { max-width: 85%; max-height: 140px; margin: 10px auto; padding: 10px; box-sizing: border-box; object-fit: contain; display: block; transition: .3s; cursor: pointer; } .image-section img:hover { background: rgba(0, 30, 160, 0.3); } .image-section p { text-align: center; } .options-section { margin-top: 5px; display: flex; justify-content: space-between; align-items: center; padding: 10px; box-sizing: border-box; border: 3px solid lightgray; border-radius: 20px; } .options-section:hover { border: 3px solid #59ACFF; } .option { font-size: 15px; padding: 5px 10px; cursor: pointer; } .option:hover { color: #59ACFF; } .option.disabled { color: gray; cursor: not-allowed; } .segmentation-button { margin-top: 5px; width: 100%; height: 40px; background-color: white; color: rgb(40, 40, 40); font-size: 17px; cursor: pointer; border: 3px solid lightgray; border-radius: 20px; } .segmentation-button:hover { border: 3px solid #59ACFF; } .segmentation-button.disabled { color: lightgray; cursor: not-allowed; } } .segment-box { position: relative; margin-left: calc(220px); width: calc(100% - 220px); height: calc(100vh - 80px); //background: #42b983; .segment-wrapper { position: absolute; left: 0; top: 0; } #segment-canvas { position: absolute; left: 0; top: 0; pointer-events: none; transform-origin: left top; z-index: 1; } #point-box { position: absolute; left: 0; top: 0; z-index: 2; pointer-events: none; } .segment-point { position: absolute; width: 10px; height: 10px; border-radius: 50%; background-color: #409EFF; } .segment-point.negative { background-color: #F56C6C; } } \u0026lt;/style\u0026gt; 2.代码说明 #\r本项目没做上传图片分割，就是简单的选择本地图片分割，data中url是img的src，path是绝对路径用来传给python后端进行分割，我是从我项目的系统获取的，请自行修改代码成你的图片路径，如src: “/assets/test.jpg”, path:“D:/project/segment/assets/test.jpg” 由于pycocotools的rle encode是从上到下进行统计连续的0和1，为了方便，我在【@/util/mask_utils.js:decodeRleCounts】解码Click点选产生的mask时将（H，W）的矩阵转成了（W，H）顺序存储的Uint8array；而在Everything分割所有时，我没有使用pycocotools的encode，而是main.py中的my_compress函数编码的，是从左到右进行压缩，因此矩阵解码后仍然是（H，W）的矩阵，所以在drawCanvas和drawEverythingCanvas中的二层循环xy的顺序不一样，我实在懒得改了，就这样就可以了。 关于上面所提rle，可以在项目根目录/notebooks/predictor_example.ipynb中产生mask的位置添加代码自行观察他编码的rle，他只支持矩阵元素为0或1，result的第一个位置是0的个数，不管矩阵是不是0开头。\n[0,0,1,1,0,1,0]，rle counts是[2（两个0）, 2（两个1）, 1（一个0）, 1（一个1）, 1（一个0）]；\n[1,1,1,1,1,0]，rle counts是[0（零个0）,5（五个1）,1（一个0）]\ndef decode_rle(rle_string): # 这是将pycocotools的counts编码的字符串转成counts数组，而非转成原矩阵 result = [] char_index = 0 while char_index \u0026lt; len(rle_string): value = 0 k = 0 more = 1 while more: c = ord(rle_string[char_index]) - 48 value |= (c \u0026amp; 0x1f) \u0026lt;\u0026lt; (5 * k) more = c \u0026amp; 0x20 char_index += 1 k += 1 if not more and c \u0026amp; 0x10: value |= -1 \u0026lt;\u0026lt; (5 * k) if len(result) \u0026gt; 2: value += result[-2] result.append(value) return result from pycocotools import mask as mask_utils import numpy as np mask = np.array([[1,1,0,1,1,0],[1,1,1,1,1,1],[0,1,1,1,0,0],[1,1,1,1,1,1]]) mask = np.asfortranarray(mask, dtype=np.uint8) print(\u0026#34;原mask：\\n{}\u0026#34;.format(mask)) res = mask_utils.encode(mask) print(\u0026#34;encode：{}\u0026#34;.format(res)) print(\u0026#34;rle counts：{}\u0026#34;.format(decode_rle(res[\u0026#34;counts\u0026#34;].decode(\u0026#34;utf-8\u0026#34;)))) # 转置后好看 print(\u0026#34;转置：{}\u0026#34;.format(mask.transpose())) # flatten后更好看 print(\u0026#34;flatten：{}\u0026#34;.format(mask.transpose().flatten())) #numpy_array = np.frombuffer(res[\u0026#34;counts\u0026#34;], dtype=np.uint8) # 打印numpy数组作为uint8array的格式 #print(\u0026#34;Uint8Array([\u0026#34; + \u0026#34;, \u0026#34;.join(map(str, numpy_array)) + \u0026#34;])\u0026#34;) 输出：\n","date":"22 April 2024","externalUrl":null,"permalink":"/blog/posts/project/segmentanything%E5%AE%98%E7%BD%91demo%E4%BD%BF%E7%94%A8vue+python%E5%AE%9E%E7%8E%B0/","section":"Posts","summary":"SegmentAnything官网demo使用vue+python实现","title":"SegmentAnything官网demo使用vue+python实现","type":"posts"},{"content":"","date":"22 April 2024","externalUrl":null,"permalink":"/blog/tags/vue/","section":"Tags","summary":"","title":"Vue","type":"tags"},{"content":"","date":"6 March 2023","externalUrl":null,"permalink":"/blog/tags/deep-java-library/","section":"Tags","summary":"","title":"Deep-Java-Library","type":"tags"},{"content":"","date":"6 March 2023","externalUrl":null,"permalink":"/blog/tags/elasticsearch/","section":"Tags","summary":"","title":"Elasticsearch","type":"tags"},{"content":"以图搜图，涉及两大功能：1、提取图像特征向量。2、相似向量检索。\n第一个功能我通过编写pytorch模型并在java端借助djl调用实现，第二个功能通过elasticsearch7.6.2的dense_vector、cosineSimilarity实现。\n一、准备模型 #\r创建demo.py，输入代码，借助resnet提取图像特征\nimport torch import torch.nn as nn import torchvision.models as models class ImageFeatureExtractor(nn.Module): def __init__(self): super(ImageFeatureExtractor, self).__init__() self.resnet = models.resnet50(pretrained=True) #最终输出维度1024的向量，下文elastic?search要设置dims为1024 self.resnet.fc = nn.Linear(2048, 1024) def forward(self, x): x = self.resnet(x) return x if __name__ == \u0026#39;__main__\u0026#39;: model = ImageFeatureExtractor() model.eval() #根据模型随便创建一个输入 input = torch.rand([1, 3, 224,?224]) output = model(input) #以这种方式保存 script = torch.jit.trace(model, input) script.save(\u0026#34;model.pt\u0026#34;) 保存好的model.pt文件放入java项目的resources中，可以在java中引入Deep-Java-Library来调用\n二、创建Java项目 #\r创建项目，引入djl和elasticsearch的依赖\n\u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;ai.djl.pytorch\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;pytorch-engine\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;0.19.0\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;ai.djl.pytorch\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;pytorch-native-cpu\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;1.10.0\u0026lt;/version\u0026gt; \u0026lt;scope\u0026gt;runtime\u0026lt;/scope\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;ai.djl.pytorch\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;pytorch-jni\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;1.10.0-0.19.0\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.elasticsearch.client\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;elasticsearch-rest-high-level-client\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;7.6.2\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; 然后随便从网上下载点图片，比如猫5张图狗5张图什么的，放到项目\u0026quot;resources/随便\u0026quot; 路径下，一会要提取他们的特征向量并上传至elasticsearch\n三、es创建文档 #\r需要在elastic search中创建一个新文档。localhost:9200/isi (img search img)\nPUT /isi { \u0026#34;mappings\u0026#34;: { \u0026#34;properties\u0026#34;: { \u0026#34;vector\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;dense_vector\u0026#34;, \u0026#34;dims\u0026#34;: 1024 }, \u0026#34;url\u0026#34; : { \u0026#34;type\u0026#34; : \u0026#34;keyword\u0026#34; }, \u0026#34;user_id\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;keyword\u0026#34; } } } } 完成下文上传操作后测试搜索（params中queryVector为随便选了个图像提取的特征向量）：\nPOST /isi/_search { \u0026#34;query\u0026#34;: { \u0026#34;function_score\u0026#34;: { \u0026#34;query\u0026#34;: { \u0026#34;match_all\u0026#34;: {} }, \u0026#34;script_score\u0026#34;: { \u0026#34;script\u0026#34;: { \u0026#34;source\u0026#34;: \u0026#34;cosineSimilarity(params.queryVector, \u0026#39;vector\u0026#39;) \u0026#34;, \u0026#34;params\u0026#34;: { \u0026#34;queryVector\u0026#34;: [-0.21950562, 0.0979692, 0.30605257, -0.04246464, 0.3086218, 0.2133326, -0.13531154, 0.16382562, 0.2505685, 0.35654455, 0.50346404, -0.2031727, -0.4501943, 0.23117387, 0.39451313, 0.044487886, -0.11032343, 0.47252116, 0.24667346, -0.2052311, -0.10872754, 0.22328046, 0.13366169, -0.5555884, 0.23139203, 0.024292288, 0.3071902, 0.23381571, -0.14484097, -0.80570614, 0.096950606, -0.034106746, 0.3221968, 0.35980088, -0.24408965, 0.10010342, 0.34878045, 0.25403115, 0.8813986, -0.23978959, -0.101492174, -0.34241566, -0.258092, 0.38593173, 0.24993907, -0.6891467, 0.5723483, -0.4987241, -0.46613082, 0.07435644, -0.32876882, 0.1923833, 0.41619772, 0.006919967, -0.35519657, -0.2463252, -0.07216969, -0.10412077, -0.3964988, -0.43174505, 0.6576338, -0.09753291, 0.058324523, -0.366405, -0.08003934, -0.41232625, -0.59834087, 0.35432702, -0.33971205, -0.695481, -0.38738084, -0.08746443, 0.37581405, 0.5092232, 0.26168102, 0.33873072, 0.3769325, 0.5525994, -0.018578911, -0.16984223, 0.24996795, -0.33088574, 0.22646378, 0.28422385, -0.4198824, 0.23480973, -0.17118981, 0.21741581, -0.21377188, -0.21778852, 0.052144438, 0.6118544, 0.29015478, 0.38010067, -0.2526567, 0.31930774, 0.39023396, -0.18484715, 0.25706646, 0.5203727, 0.29022205, -0.21464778, 0.47365767, 0.87486994, 0.44488958, 0.35022217, 0.27183002, -0.10723972, 0.22553404, -0.15306596, 0.22945945, -0.3670853, 0.19239302, -0.44274554, -0.57217056, 0.03906954, 0.7685065, -0.9496267, 0.4024507, -0.13379225, 0.011526011, -0.09900194, -0.16814715, 0.13582, -0.30829066, -0.13147047, 0.2822718, -0.1368126, -0.027293338, 0.49085197, -0.5331921, 0.49128994, 0.07755277, 0.0067159105, -0.42123628, 0.4408007, 0.58957845, -0.611145, -0.20726573, -0.14454971, 0.66820395, -0.007127879, 0.39164197, 0.69164586, 0.0024765078, -0.002838524, -0.6342908, 0.082881235, 0.298888, 0.5127087, -0.1300959, 0.16589926, 0.14517388, 0.2331577, -0.79271543, 0.20724288, -0.08834252, 0.2896087, 0.45591825, 0.0028544534, -0.51650685, 0.40780628, -0.2327805, 0.36442646, -0.6027139, -0.13944842, 0.24956803, -0.024805166, 0.24770494, -0.45614043, 0.051073316, 0.16322246, 0.28946966, -0.74529195, -0.4670576, -0.0660522, 0.2550549, -0.08014119, 0.06633573, -0.24153815, 0.36240074, 0.6568509, 0.1186171, 0.24172828, -0.47089025, -0.03256646, 0.14894187, 0.37634763, -0.24351446, 0.16164464, -0.06065242, 0.5091901, 0.5561973, -0.12233099, 0.13057524, -0.6718906, 0.35523456, 0.07152326, -0.20505619, -0.72078145, 0.044493422, -0.7440514, 0.032849424, 0.20111637, 0.43541732, 0.57285374, 0.11018203, -0.28251386, 0.2966433, -0.23974887, 0.068521775, 0.108346015, 0.30997896, 0.1311228, 0.22840464, -0.027650226, 0.73658687, -0.42126977, -0.10911406, -0.03391467, 0.035138264, -0.37075225, -0.5644764, 0.18124935, -0.16772854, 0.19432716, -0.22632165, 0.3900388, -0.69183433, 0.3003796, -0.3586413, 0.53591347, 0.6152693, -0.0038650539, -0.21756373, -0.31812942, -0.5402912, 0.2289098, -0.26077187, -0.2690417, -0.23407489, -0.3686389, -0.40951043, 0.18680233, 0.09277787, -0.013292864, -0.10835711, -0.53350085, 0.14608094, -0.15405877, -0.4699281, 0.10309839, 0.270473, -0.53506243, 0.001998501, -0.24999668, -0.1813581, -0.005529306, -0.56031805, -0.048346244, 0.16996299, -0.29963455, 0.20901474, -0.30934745, -0.21063489, 0.113431595, 0.032042094, -0.41378844, 0.17604393, -0.4631637, -0.5003293, -0.55831015, -0.15353276, -0.46837738, -0.77764505, 0.4621635, 0.28037566, 0.044108637, -0.11912877, -0.082292914, 0.6248694, -0.25019014, 0.2364985, 0.37894827, -0.1412379, -0.4572027, 0.08775234, -0.1661222, -0.09539573, 0.4805072, -0.44165152, 0.092903554, 0.28206846, 0.19792132, -0.05991053, -0.1682668, -0.5983673, 0.29130918, 0.17447682, -0.13979116, -0.5393585, 0.16808756, 0.7923586, 0.09991479, -0.22254673, -0.04165893, -0.2054404, -0.23928185, -0.36898398, -0.25248212, 0.49941728, 0.41065186, -0.23073834, -0.23773289, -0.1929644, -0.3499782, 0.1223462, -0.06807637, 0.175438, 0.14037246, 0.04750026, 0.31662372, 0.9243611, 0.12812611, -0.069829896, -0.29231697, -0.14734478, 0.1471743, -0.22162598, 0.37801683, 0.078523755, 0.022035534, 0.64812034, -0.23139268, -0.24911498, -0.33378544, -0.07344267, 0.11432794, -0.059079893, 0.31315947, -0.48160297, 0.045891166, 0.09479678, 0.4726333, -0.039052956, -0.2787302, -0.11797555, 0.25318092, -0.27943715, -0.22414759, -0.5546054, -0.106284395, 0.028235137, -0.3618798, -0.3404342, 0.31008774, -0.062293224, 0.053846367, 0.057488017, 0.09902769, 0.70674986, 0.37460673, 0.032727424, -0.4898543, -0.40673503, -0.19604088, 0.4853623, -0.20603043, -0.067109674, -0.53158236, -0.09847969, -0.14446007, -0.15639015, 0.13992839, -0.11348952, 0.15039599, 0.18439567, -0.20131497, 0.20396306, -0.3851034, -0.42031956, 0.2908249, 0.38035524, 0.15540914, 0.030931382, 0.33113614, 0.2741093, 0.18215193, -0.017978923, -0.0023425352, 0.27586395, -0.48403275, 0.023819037, -0.31364787, 0.21789135, -0.3554474, 0.0189421, 0.85861605, 0.15560226, 0.014263891, -0.16498215, -0.39344954, 0.5993788, 0.2708438, -0.29564035, 0.029406447, -0.43017676, 0.057052203, -0.04981024, -0.27520806, -0.51138026, 0.5926964, -0.40741482, 0.08575866, -0.196537, 0.3554017, -0.14750098, 0.051478647, -0.44164056, 0.13783655, 0.697562, 0.069351025, -0.14384158, 0.16349174, 0.36234668, -0.29366237, -0.28419775, -0.22636151, -0.122755915, -0.08138535, -0.7832234, 0.11401084, 0.43588766, 0.3236169, 0.14211948, 0.11028929, 0.2964773, -0.35562044, -0.3229665, -0.12864646, -0.3883256, 0.18198651, -0.45499957, 0.6918359, 0.1301559, -0.19978304, -0.1603161, -0.21330322, 0.07482076, 0.19179785, 0.45639312, 0.010576941, -0.3680949, -0.67871827, 0.14103784, 0.26047683, 0.64846706, -0.6718977, -0.5179457, 0.5580428, -0.48272127, 0.09030259, -0.47150746, 0.534373, 0.20664622, 0.5013874, -0.20477112, 0.22002026, -0.042670928, -0.047632568, -0.14199638, -0.36322978, 0.14286354, 0.35466686, 0.31752202, -0.3477305, -0.0045454763, -0.066675276, -0.2702982, 0.21498637, 0.08594364, 0.23323308, -0.6374196, 0.36372712, -0.30689493, -0.15897107, -0.16212063, -0.3653109, -0.40084177, 0.050653785, 0.13755074, -0.11666774, -0.2285859, -0.037478417, 0.20095918, 0.3487094, -0.08746929, 0.61240536, -0.26032016, 0.4687963, 0.14449233, 0.47144917, 0.039736982, 0.079499036, 0.19588508, -0.017659996, 0.5632192, -0.18003824, -0.040397547, -0.36472237, -0.025306623, 0.437257, -0.086474344, -0.7352421, 0.13874608, -0.110756345, -0.048157282, 0.19240974, 0.080513775, 0.59602517, -0.34077823, 0.35610113, -0.25455856, -0.36457375, 0.37937617, -0.400827, 0.054261968, 0.2879811, -0.11387855, 0.5244568, -0.107315816, 0.27161226, -0.1021186, -0.18614362, 0.2978657, 0.5370135, 0.36572018, -0.15257043, 0.20518257, 0.6419209, -0.3316342, -0.2725687, 0.014353298, 0.26933295, 0.26414502, 0.12794185, -0.21693292, 0.20204909, -0.21943296, -0.2593051, 0.13386369, -0.58061814, -0.63560903, 0.36805475, 0.016099993, -0.30377084, -0.06283789, -0.2682347, 0.056822743, -0.40932798, 0.36230356, -0.0491954, -0.029950788, -0.014880693, 0.20313863, 0.2214678, 0.2732247, -0.20896281, 0.017126573, -0.122736566, 0.06616182, 0.024874818, -0.7285719, -0.08402412, 0.28992975, 0.6755032, -0.071360886, 0.08794832, 0.09367153, 0.2191656, -0.28197074, -0.060419604, 0.008227522, -0.77392685, -0.37148783, 0.028109314, 0.6432903, 0.107398115, -0.031399835, -0.17004932, 0.34670952, -0.2593519, 0.3303603, 0.05096604, -0.59591603, -0.28604108, -0.37413853, -0.50223345, -0.06456756, 0.30097467, -0.344833, -0.44159552, 0.1301419, 0.4851787, -0.48891386, 0.29695496, 0.04624813, 0.44581613, -0.342841, 0.030060228, 0.41584003, -0.06151448, -0.6391304, 0.24350402, 0.2373283, -0.21993239, -0.15819496, 0.33998314, -0.104932904, 0.53482264, 0.18774611, -0.30718842, 0.09050197, 0.06582601, -0.8714315, 0.2866774, 0.10656398, 0.108911455, 0.12436204, 0.6072432, -0.263783, 0.3477571, -0.21450447, -0.20965956, 0.2725455, -0.15962526, -0.023959063, -0.16272986, 0.37898353, 0.1893706, -0.35078412, 0.018863793, 0.19243363, 0.7553659, 0.3897343, 0.16990745, -0.12922706, 0.32337534, -0.07977969, 0.09969508, 0.12787843, 0.14316258, -0.38789797, -0.18665363, 0.41474488, -0.04381171, 0.47398177, 0.20612329, -0.13801742, 0.48971528, 0.15693656, 0.10821125, -0.10725921, -0.20428485, -0.84528387, 0.18022658, 0.50938493, -0.32568434, 0.30802926, 0.33309558, 0.1919713, 0.20726888, -0.16194591, 0.17306438, -0.15405764, -0.57394016, 0.6925947, -0.31852844, -0.07849608, -0.5219136, -0.12416126, -0.20998093, 0.6197391, -0.11049731, -0.07111119, 0.22960934, -0.15123159, 0.22498849, -0.07220747, -0.28159276, -0.16107027, -0.010942766, 0.5636157, 0.4077794, 0.39782813, 0.456499, 0.22233048, 0.56309587, 0.26227084, -0.18100007, 0.06122207, 0.27089763, 0.17011975, -0.42344883, -0.063430965, 0.070528686, -0.046008512, -0.29042992, -0.07066448, -0.2578915, -0.27239347, 0.2880362, -0.056104008, -0.40367386, -0.091103815, 0.46031728, -0.36084417, -0.01598189, 0.19975084, 0.01695741, 0.3267317, 0.22532314, -0.55215025, -0.098993674, 0.36677533, 0.44303438, 0.3397658, -0.42336193, 0.002683131, 0.17797257, 0.6305417, 0.54148203, 0.17323923, 0.11428201, -0.07747766, -0.11240339, 0.11639454, 0.05241075, 0.035248175, -0.57705295, 0.45263726, -0.35879546, -0.7651455, -0.03033166, 0.47368425, -0.02433325, -0.15444314, -0.27954623, 0.30544212, 0.19804852, -0.66339266, -0.018637381, -0.3836641, 0.10387643, -0.23915236, 0.097831056, -0.18519881, 0.42123106, -0.0021492783, -0.4928366, 0.051339585, -0.50189865, -0.0325974, 0.03475754, 0.24877562, -0.50540763, 0.14656179, -0.033425312, -0.2698435, 0.1414198, 0.015859405, 0.4277053, -0.040847912, 0.032052774, 0.39479595, -0.0018053818, -0.37721512, -0.027027369, 0.44188333, 0.18346275, 0.6159405, -0.0010263352, 0.120682925, -0.5515572, 0.4246414, 0.37855124, 0.31135443, 0.255429, 0.010005429, -0.8138245, -0.26479146, -0.34098482, 0.14558652, 0.63190436, 0.1779253, 0.43572387, 0.6876498, 0.06974258, 0.007930072, -0.09172004, 0.18957798, -0.16211304, 0.18704513, -0.25963065, -0.26715553, -0.22632961, -0.3099424, 0.3464097, -0.12967771, 0.16652606, 0.2921636, 0.09758349, 0.2582998, 0.11978268, 0.42495492, 0.02736637, -0.32260302, -0.3379873, -0.23938976, -0.19942743, 0.30798694, 0.25228044, -0.033107795, 0.09772943, 0.38394168, 0.7219979, -0.5064522, -0.21723904, -0.2033075, 0.020857109, 0.13053142, -0.38791847, 0.4991684, 0.20062184, 0.49477854, -0.26213312, -0.61973774, -0.074013926, -0.12128413, -0.56617993, 0.13392372, 0.73387975, 0.5033897, 0.33373255, -0.06803796, 0.5550287, 0.26606622, -0.35267583, -0.23695293, 0.26170373, -0.12340009, 0.80251247, -0.70798254, -0.028666062, 0.6997679, -0.05996991, 0.06898104, -0.14557816, 0.054661553, 0.5187798, 0.41702572, 0.792891, -0.17265478, -0.06679568, -0.331478, 0.0694997, 0.4253223, -0.2783028, 0.23903547, -0.58266413, 0.09287575, 0.045140624, -0.10417832, 0.08257238, 0.48208177, -0.24164109, 0.81102467, -0.40342188, 0.65527093, -0.12488523, 0.078327045, -0.5329088, 0.37736076, 0.2925939, 0.20142855, 0.21402623, -0.21197478, -0.31154165, 0.45887777, 0.205758, 0.12233909, -0.26103553, 1.1294454, -0.7648704, 0.32436037, -0.06368509, 0.57072765, 0.9322751, -0.29020756, 0.44769418, -0.839836, 0.07865648, -0.2559945, 0.4581841, -0.017776983, 0.18255703, 0.2528128, -0.41778934, -0.071126916, -0.041809052, -0.53156054, 0.16023451, -0.2608511, 0.0725673, -0.15921246, -0.03191948, -0.366381, 0.53149635, -0.2550226, -0.022553788, -0.36375383, 0.40580854, -0.076502666, -0.04272891, -0.28619775, -0.26721123, 0.56044143, -0.040593743, -0.28715926, -0.0043915436, 0.11840753, -0.35239887, -0.30920973, -0.14502974, -0.36411104, 0.44530326, 0.43969297, -0.23792548, 0.30757633, 0.26880985, 0.18359815, -0.5675205, 0.19222523, 0.22303401, 0.21661428, 0.22141027, -0.10556421, 0.11646886, 0.17539617, 0.96604997, 0.055217523, -0.7456562, -0.106842384, -0.19286019, 0.17667075, 0.92509866, 0.57278365, -0.024029609, -0.8224203, -0.12689532, 0.079639494, -0.06534128, 0.7061269, -0.09063532, 0.5011331, -0.5051317, -0.054662913, -0.26086497, -0.53341925, 0.9624672, 0.08449669, -0.21910548, 0.36410314, -0.24794322, 0.16658492, 0.7944018, -0.058724128, -0.22618303, 0.5062074, -0.516353, 0.69395834, -0.23764399, -0.13169304, 0.51044196, -0.042955525, -0.42410484, -0.4293069, 0.13401544, 0.80136365, 0.30296534, -0.06788176, 0.16880289, 0.27950272, -0.37403736, 0.11813866, -0.41821468, 0.0033562258, -0.53348655, -0.22950119, 0.3889678, 0.10558852, -0.25912097, -0.03190498, 0.028149713, 0.36284888, -0.63619995, 0.8380439, 0.6589971, 0.6046954, -0.2093836, 0.08808039, 0.48332697, -0.010615652, -0.40519536, 0.011716956, 0.096273005, -0.27340046, -0.19237258, -0.2970637, -0.44011658, 0.17786184, 0.0071578454, 0.23985118, -0.040508576] } } } } }, \u0026#34;_source\u0026#34;: [\u0026#34;url\u0026#34;], \u0026#34;size\u0026#34;: 100 } 四、调用pytorch模型代码 #\r创建Test类，copy一下我的，感兴趣可以去djl的官网学习更多内容。写完后，就可以获取“随便”文件夹中的图像的特征向量，上传到es里了。\npackage org.gwen; import ai.djl.Device; import ai.djl.Model; import ai.djl.inference.Predictor; import ai.djl.modality.cv.Image; import ai.djl.modality.cv.ImageFactory; import ai.djl.modality.cv.transform.Normalize; import ai.djl.modality.cv.transform.Resize; import ai.djl.modality.cv.transform.ToTensor; import ai.djl.modality.cv.util.NDImageUtils; import ai.djl.ndarray.NDArray; import ai.djl.ndarray.NDList; import ai.djl.ndarray.NDManager; import ai.djl.translate.Transform; import ai.djl.translate.Translator; import ai.djl.translate.TranslatorContext; import org.apache.http.HttpHost; import org.elasticsearch.action.bulk.BulkRequest; import org.elasticsearch.action.index.IndexRequest; import org.elasticsearch.action.search.SearchRequest; import org.elasticsearch.action.search.SearchResponse; import org.elasticsearch.client.RequestOptions; import org.elasticsearch.client.RestClient; import org.elasticsearch.client.RestClientBuilder; import org.elasticsearch.client.RestHighLevelClient; import org.elasticsearch.client.transport.TransportClient; import org.elasticsearch.common.settings.Settings; import org.elasticsearch.common.xcontent.XContentType; import org.elasticsearch.index.query.QueryBuilders; import org.elasticsearch.index.query.ScriptQueryBuilder; import org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilder; import org.elasticsearch.index.query.functionscore.ScoreFunctionBuilders; import org.elasticsearch.script.Script; import org.elasticsearch.script.ScriptType; import org.elasticsearch.search.SearchHit; import org.elasticsearch.search.SearchHits; import org.elasticsearch.search.builder.SearchSourceBuilder; import org.gwen.entity.SearchResult; import java.io.File; import java.io.IOException; import java.io.InputStream; import java.net.URI; import java.net.URL; import java.nio.file.Paths; import java.util.*; public class Test { private static final String INDEX = \u0026#34;isi\u0026#34;; private static final int IMAGE_SIZE = 224; private static Model model;?//模型 private static Predictor\u0026lt;Image, float[]\u0026gt; predictor;?//predictor.predict(input)相当于python中model(input) static { try { model = Model.newInstance(\u0026#34;model\u0026#34;); ? ? ? ? ? ? //这里的model.pt是上面代码展示的那种方式保存的 model.load(Test.class.getClassLoader().getResourceAsStream(\u0026#34;model.pt\u0026#34;)); Transform resize = new Resize(IMAGE_SIZE); Transform toTensor = new ToTensor(); Transform normalize = new Normalize(new float[]{0.485f, 0.456f, 0.406f}, new float[]{0.229f, 0.224f, 0.225f}); //Translator处理输入Image转为tensor、输出转为float[] ? ? ? ? ? ? Translator\u0026lt;Image, float[]\u0026gt; translator = new Translator\u0026lt;Image, float[]\u0026gt;() { @Override public NDList processInput(TranslatorContext ctx, Image input) throws Exception { NDManager ndManager = ctx.getNDManager(); System.out.println(\u0026#34;input: \u0026#34; + input.getWidth() + \u0026#34;, \u0026#34; + input.getHeight()); NDArray transform = normalize.transform(toTensor.transform(resize.transform(input.toNDArray(ndManager)))); System.out.println(transform.getShape()); NDList list = new NDList(); list.add(transform); return list; } @Override public float[] processOutput(TranslatorContext ctx, NDList ndList) throws Exception { return ndList.get(0).toFloatArray(); } }; predictor = new Predictor\u0026lt;\u0026gt;(model, translator, Device.cpu(), true); } catch (Exception e) { e.printStackTrace(); } } } 五、es上传和搜索 #\r上传：遍历每张图片，获取每张图片的特征，上传到es\n搜索：获取输入图像的特征，创建SearchRequest在es中通过painless脚本进行余弦相似度对比检索。\n首先创建SearchResult类表示es搜索的结果，包括图像url和相关度评分score\n@Data @AllArgsConstructor public class SearchResult { private String url; private Float score; } 然后在Test里实现upload和search\npublic static void upload() throws Exception { RestHighLevelClient client = new RestHighLevelClient( RestClient.builder(new HttpHost(\u0026#34;localhost\u0026#34;, 9200, \u0026#34;http\u0026#34;))); //批量上传请求 BulkRequest bulkRequest = new BulkRequest(INDEX); File file = new File(\u0026#34;C:\\\\Users\\\\Administrator\\\\IdeaProjects\\\\img_search_img\\\\src\\\\main\\\\resources\\\\随便\u0026#34;); for (File listFile : file.listFiles()) { float[] vector = predictor.predict(ImageFactory.getInstance().fromInputStream(Test.class.getClassLoader().getResourceAsStream(\u0026#34;随便/\u0026#34; + listFile.getName()))); // 构建文档 Map\u0026lt;String, Object\u0026gt; jsonMap = new HashMap\u0026lt;\u0026gt;(); jsonMap.put(\u0026#34;url\u0026#34;, listFile.getAbsolutePath()); jsonMap.put(\u0026#34;vector\u0026#34;, vector); jsonMap.put(\u0026#34;user_id\u0026#34;, \u0026#34;user123\u0026#34;); IndexRequest request = new IndexRequest(INDEX).source(jsonMap, XContentType.JSON); bulkRequest.add(request); } client.bulk(bulkRequest, RequestOptions.DEFAULT); client.close(); } //接收待搜索图片的inputstream，搜索与其相似的图片 public static List\u0026lt;SearchResult\u0026gt; search(InputStream input) throws Throwable { float[] vector = predictor.predict(ImageFactory.getInstance().fromInputStream(input)); System.out.println(Arrays.toString(vector)); //展示k个结果 int k = 100; // 连接Elasticsearch服务器 RestHighLevelClient client = new RestHighLevelClient( RestClient.builder(new HttpHost(\u0026#34;localhost\u0026#34;, 9200, \u0026#34;http\u0026#34;))); SearchRequest searchRequest = new SearchRequest(INDEX); Script script = new Script( ScriptType.INLINE, \u0026#34;painless\u0026#34;, \u0026#34;cosineSimilarity(params.queryVector, doc[\u0026#39;vector\u0026#39;])\u0026#34;, Collections.singletonMap(\u0026#34;queryVector\u0026#34;, vector)); FunctionScoreQueryBuilder functionScoreQueryBuilder = QueryBuilders.functionScoreQuery( QueryBuilders.matchAllQuery(), ScoreFunctionBuilders.scriptFunction(script)); SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder(); searchSourceBuilder.query(functionScoreQueryBuilder) .fetchSource(null, \u0026#34;vector\u0026#34;)?//不返回vector字段，太多了没用还耗时 .size(k); searchRequest.source(searchSourceBuilder); SearchResponse searchResponse = client.search(searchRequest, RequestOptions.DEFAULT); SearchHits hits = searchResponse.getHits(); List\u0026lt;SearchResult\u0026gt; list = new ArrayList\u0026lt;\u0026gt;(); for (SearchHit hit : hits) { // 处理搜索结果 System.out.println(hit.toString()); SearchResult result = new SearchResult((String) hit.getSourceAsMap().get(\u0026#34;url\u0026#34;), hit.getScore()); list.add(result); } client.close(); return list; } 六、测试 #\r@RestController @CrossOrigin public class SearchController { @PostMapping(\u0026#34;search\u0026#34;) public ResponseEntity search(MultipartFile file) { try { List\u0026lt;SearchResult\u0026gt; list = Test.search(file.getInputStream()); return ResponseEntity.ok(list); } catch (Throwable e) { return ResponseEntity.status(400).body(null); } } } 页面：\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Title\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; body { background: url(\u0026#34;/img/bg.jpg\u0026#34;); background-attachment: fixed; background-size: 100% 100%; } body \u0026gt; div { width: 1000px; margin: 50px auto; padding: 10px 20px; border: 1px solid lightgray; border-radius: 20px; box-sizing: border-box; background: rgba(255, 255, 255, 0.7); } .upload { display: inline-block; width: 300px; height: 280px; border: 1px dashed lightcoral; vertical-align: top; } .upload .cover { width: 200px; height: 200px; margin: 10px 50px; border: 1px solid black; box-sizing: border-box; text-align: center; line-height: 200px; position: relative; } .upload img { width: 198px; height: 198px; position: absolute; left:0; top: 0; } .upload input { margin-left: 50px; } .upload button { width: 80px; height: 30px; margin-left: 110px; } .result-block { display: inline-block; margin-left: 40px; border: 1px solid lightgray; border-radius: 10px; min-height: 500px; width: 600px; } .result-block h1 { text-align: center; margin-top: 100px; } .result { padding: 10px; cursor: pointer; display: inline-block; } .result:hover { background: rgb(240, 240, 240); } .result p { width: 110px; overflow: hidden; white-space: nowrap; text-overflow: ellipsis; } .result img { width: 160px; height: 160px; } .result .prob { color: rgb(37, 147, 60) } \u0026lt;/style\u0026gt; \u0026lt;script src=\u0026#34;js/jquery-3.6.0.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div\u0026gt; \u0026lt;div class=\u0026#34;upload\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;cover\u0026#34;\u0026gt; 请选择图片 \u0026lt;img id=\u0026#34;image\u0026#34; src=\u0026#34;\u0026#34;/\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;input id=\u0026#34;file\u0026#34; type=\u0026#34;file\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;result-block\u0026#34;\u0026gt; \u0026lt;h1\u0026gt;请选择图片\u0026lt;/h1\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;ul id=\u0026#34;box\u0026#34;\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;script\u0026gt; var file = $(\u0026#39;#file\u0026#39;) file.change(function () { let f = this.files[0] let index = f.name.lastIndexOf(\u0026#39;.\u0026#39;) let fileText = f.name.substring(index,f.name.length) let ext = fileText.toLowerCase() //文件类型 console.log(ext) if(ext != \u0026#39;.png\u0026#39; \u0026amp;\u0026amp; ext != \u0026#39;.jpg\u0026#39; \u0026amp;\u0026amp; ext != \u0026#39;.jpeg\u0026#39;){ alert(\u0026#39;系统仅支持 JPG、PNG、JPEG 格式的图片，请您调整格式后重新上传\u0026#39;) return } $(\u0026#39;.result-block\u0026#39;).empty().append($(\u0026#39;\u0026lt;h1\u0026gt;正在识别中...\u0026lt;/h1\u0026gt;\u0026#39;)) $(\u0026#34;#image\u0026#34;).attr(\u0026#34;src\u0026#34;,getObjectURL(f)); let formData = new FormData() formData.append(\u0026#39;file\u0026#39;,f) $.ajax({ url: \u0026#39;http://localhost:8080/search\u0026#39;, method: \u0026#39;post\u0026#39;, data: formData, processData: false, contentType: false, success: res =\u0026gt; { console.log(\u0026#39;shibie\u0026#39;, res) $(\u0026#39;.result-block\u0026#39;).empty() for (let item of res) { console.log(item) let html = `\u0026lt;div class=\u0026#34;result\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;file:///${item.url}\u0026#34;/\u0026gt; \u0026lt;div style=\u0026#34;display: inline-block;vertical-align: top\u0026#34;\u0026gt; \u0026lt;p class=\u0026#34;prob\u0026#34;\u0026gt;得分：${item.score.toFixed(4)}\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt;` $(\u0026#39;.result-block\u0026#39;).append($(html)) } } }) }); $(\u0026#39;#button\u0026#39;).click(function(e) { var file = $(\u0026#39;#file\u0026#39;)[0].files[0] //单个 console.log(file) }) function getObjectURL(file) { var url = null; if (window.createObjcectURL != undefined) { url = window.createOjcectURL(file); } else if (window.URL != undefined) { url = window.URL.createObjectURL(file); } else if (window.webkitURL != undefined) { url = window.webkitURL.createObjectURL(file); } return url; } function detect() { } \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; ","date":"6 March 2023","externalUrl":null,"permalink":"/blog/posts/java/java+elasticsearch+pytorch%E5%AE%9E%E7%8E%B0%E4%BB%A5%E5%9B%BE%E6%90%9C%E5%9B%BE/","section":"Posts","summary":"Java+ElasticSearch+Pytorch实现以图搜图","title":"Java+ElasticSearch+Pytorch实现以图搜图","type":"posts"},{"content":"","date":"6 March 2023","externalUrl":null,"permalink":"/blog/tags/pytorch/","section":"Tags","summary":"","title":"Pytorch","type":"tags"},{"content":"","date":"6 March 2023","externalUrl":null,"permalink":"/blog/categories/tutorials/","section":"Categories","summary":"","title":"Tutorials","type":"categories"},{"content":"我的Java后台需要对数据进行分析，但找不到合适的方法，就准备用pytorch写个模型凑活着用。\n使用的DJL调用pytorch引擎\nGithub：djl/README.md at master · deepjavalibrary/djl · GitHub\npom.xml中添加依赖：\n\u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;ai.djl.pytorch\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;pytorch-engine\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;0.16.0\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;ai.djl.pytorch\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;pytorch-native-auto\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;1.9.1\u0026lt;/version\u0026gt; \u0026lt;scope\u0026gt;runtime\u0026lt;/scope\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;ai.djl.pytorch\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;pytorch-jni\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;1.9.1-0.16.0\u0026lt;/version\u0026gt; \u0026lt;scope\u0026gt;runtime\u0026lt;/scope\u0026gt; \u0026lt;/dependency\u0026gt; 注意version与pytorch版本有一个对应关系\nPyTorch engine version PyTorch native library version pytorch-engine:0.15.0 pytorch-native-auto: 1.8.1, 1.9.1, 1.10.0 pytorch-engine:0.14.0 pytorch-native-auto: 1.8.1, 1.9.0, 1.9.1 pytorch-engine:0.13.0 pytorch-native-auto:1.9.0 pytorch-engine:0.12.0 pytorch-native-auto:1.8.1 pytorch-engine:0.11.0 pytorch-native-auto:1.8.1 pytorch-engine:0.10.0 pytorch-native-auto:1.7.1 pytorch-engine:0.9.0 pytorch-native-auto:1.7.0 pytorch-engine:0.8.0 pytorch-native-auto:1.6.0 pytorch-engine:0.7.0 pytorch-native-auto:1.6.0 pytorch-engine:0.6.0 pytorch-native-auto:1.5.0 pytorch-engine:0.5.0 pytorch-native-auto:1.4.0 pytorch-engine:0.4.0 pytorch-native-auto:1.4.0 其他问题访问连接：PyTorch Engine - Deep Java Library\n官方给出了一个图片分类的例子，我只需要纯数据不需要图片输入。\n随便写了个例子 输入是[a, b] 输出一个0~1的数\n还是建议用python先训练好模型，不要用Java训练。模型训练好后，首先要做的是把pytorch模型转为TorchScript，TorchScript会把模型结构和参数都加载进去的\n官网原文：\nThere are two ways to convert your model to TorchScript: tracing and scripting. We will only demonstrate the first one, tracing, but you can find information about scripting from the PyTorch documentation. When tracing, we use an example input to record the actions taken and capture the the model architecture. This works best when your model doesn\u0026rsquo;t have control flow. If you do have control flow, you will need to use the scripting approach. In DJL, we use tracing to create TorchScript for our ModelZoo models.\nHere is an example of tracing in actions:\nimport torch import torchvision # An instance of your model. model = torchvision.models.resnet18(pretrained=True) # Switch the model to eval model model.eval() # An example input you would normally provide to your model\u0026#39;s forward() method. example = torch.rand(1, 3, 224, 224) # Use torch.jit.trace to generate a torch.jit.ScriptModule via tracing. traced_script_module = torch.jit.trace(model, example) # Save the TorchScript model traced_script_module.save(\u0026#34;traced_resnet_model.pt\u0026#34;) 如果你使用了dropout等 一定要记得加上model.eval()再保存\n对于我的来说 就下面这样\nmodel = LinearModel() model.load_state_dict(torch.load(\u0026#34;model.pth\u0026#34;)) input = torch.tensor([0.72, 0.94]).float() //根据你的模型随便创建一个输入 script = torch.jit.trace(model, input) script.save(\u0026#34;model.pt\u0026#34;) 然后该写Java代码了\n官网例子：Load a PyTorch Model - Deep Java Library\n还有这个：03 image classification with your model - Deep Java Library\n我的数据就不需要transform了 代码：\n//首先创建一个模型 Model model = Model.newInstance(\u0026#34;test\u0026#34;); try { model.load(Paths.get(\u0026#34;C:\\\\Users\\\\Administrator\\\\IdeaProjects\\\\PytorchInJava\\\\src\\\\main\\\\resources\\\\model.pt\u0026#34;)); System.out.println(model); //Predictor\u0026lt;参数类型，返回值类型\u0026gt; 输入图片的话参数是Image //我的参数是float32 不要写成Double Predictor\u0026lt;float[], Object\u0026gt; objectObjectPredictor = model.newPredictor(new NoBatchifyTranslator\u0026lt;float[], Object\u0026gt;() { @Override public NDList processInput(TranslatorContext translatorContext, float[] input) throws Exception { NDManager ndManager = translatorContext.getNDManager(); NDArray ndArray = ndManager.create(input); //ndArray作为输入 System.out.println(ndArray); return new NDList(ndArray); } @Override public Object processOutput(TranslatorContext translatorContext, NDList ndList) throws Exception { System.out.println(\u0026#34;process: \u0026#34; + ndList.get(0).getFloat()); return ndList.get(0).getFloat(); } }); float result = objectObjectPredictor.predict(new float[]{0.6144011f, 0.952401f}); System.out.println(\u0026#34;result: \u0026#34; + result); } catch (IOException e) { e.printStackTrace(); } catch (MalformedModelException e) { e.printStackTrace(); } catch (Exception e) { System.out.println(\u0026#34;qunimade \u0026#34;); e.printStackTrace(); } 输出：\n更新 #\r当我打包成jar到centos7的linux中运行时，报错UnsatisfiedLinkError，经过大神的指导，问题出在我引的依赖。\n修改后的依赖：\n\u0026lt;properties\u0026gt; \u0026lt;java.version\u0026gt;8\u0026lt;/java.version\u0026gt; \u0026lt;jna.version\u0026gt;5.3.0\u0026lt;/jna.version\u0026gt; \u0026lt;/properties\u0026gt; ​ ​ \u0026lt;dependencies\u0026gt; ​ \u0026lt;dependency\u0026gt; ​ \u0026lt;groupId\u0026gt;ai.djl.pytorch\u0026lt;/groupId\u0026gt; ​ \u0026lt;artifactId\u0026gt;pytorch-engine\u0026lt;/artifactId\u0026gt; ​ \u0026lt;version\u0026gt;0.16.0\u0026lt;/version\u0026gt; ​ \u0026lt;/dependency\u0026gt; ​ \u0026lt;dependency\u0026gt; ​ \u0026lt;groupId\u0026gt;ai.djl.pytorch\u0026lt;/groupId\u0026gt; ​ \u0026lt;artifactId\u0026gt;pytorch-native-cpu-precxx11\u0026lt;/artifactId\u0026gt; ​ \u0026lt;classifier\u0026gt;linux-x86_64\u0026lt;/classifier\u0026gt; ​ \u0026lt;version\u0026gt;1.9.1\u0026lt;/version\u0026gt; ​ \u0026lt;scope\u0026gt;runtime\u0026lt;/scope\u0026gt; ​ \u0026lt;/dependency\u0026gt; ​ \u0026lt;dependency\u0026gt; ​ \u0026lt;groupId\u0026gt;ai.djl.pytorch\u0026lt;/groupId\u0026gt; ​ \u0026lt;artifactId\u0026gt;pytorch-jni\u0026lt;/artifactId\u0026gt; ​ \u0026lt;version\u0026gt;1.9.1-0.16.0\u0026lt;/version\u0026gt; ​ \u0026lt;scope\u0026gt;runtime\u0026lt;/scope\u0026gt; ​ \u0026lt;/dependency\u0026gt; ​ \u0026lt;dependency\u0026gt; ​ \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; ​ \u0026lt;artifactId\u0026gt;spring-boot-starter-web\u0026lt;/artifactId\u0026gt; ​ \u0026lt;/dependency\u0026gt; ​ \u0026lt;/dependencies\u0026gt; ","date":"13 January 2023","externalUrl":null,"permalink":"/blog/posts/java/java%E4%BD%BF%E7%94%A8pytorch%E6%A8%A1%E5%9E%8B%E8%BF%9B%E8%A1%8C%E6%95%B0%E6%8D%AE%E6%8E%A8%E7%AE%97/","section":"Posts","summary":"在Java中使用DJL调用pytorch模型进行推算","title":"Java使用pytorch模型进行数据推算","type":"posts"},{"content":"之前写了个输入是1x2向量的模型的调用文章，后来有了个需要用到图像识别的项目，因此写下此文记录一下在java中如何借助DJL调用自己写的pytorch模型进行图像识别。\n官网例子\n我具体模型用的什么模型就不介绍了，输入图片是3*224*224，放入图片前需要看一下横纵比是否合理，不合理的话会进行下面这样的操作：\n1. 依赖 #\r\u0026lt;dependency\u0026gt;\r\u0026lt;groupId\u0026gt;ai.djl.pytorch\u0026lt;/groupId\u0026gt;\r\u0026lt;artifactId\u0026gt;pytorch-engine\u0026lt;/artifactId\u0026gt;\r\u0026lt;version\u0026gt;0.16.0\u0026lt;/version\u0026gt;\r\u0026lt;/dependency\u0026gt;\r\u0026lt;dependency\u0026gt;\r\u0026lt;groupId\u0026gt;ai.djl.pytorch\u0026lt;/groupId\u0026gt;\r\u0026lt;artifactId\u0026gt;pytorch-native-auto\u0026lt;/artifactId\u0026gt;\r\u0026lt;version\u0026gt;1.9.1\u0026lt;/version\u0026gt;\r\u0026lt;scope\u0026gt;runtime\u0026lt;/scope\u0026gt;\r\u0026lt;/dependency\u0026gt;\r\u0026lt;dependency\u0026gt;\r\u0026lt;groupId\u0026gt;ai.djl.pytorch\u0026lt;/groupId\u0026gt;\r\u0026lt;artifactId\u0026gt;pytorch-jni\u0026lt;/artifactId\u0026gt;\r\u0026lt;version\u0026gt;1.9.1-0.16.0\u0026lt;/version\u0026gt;\r\u0026lt;scope\u0026gt;runtime\u0026lt;/scope\u0026gt;\r\u0026lt;/dependency\u0026gt;\r2. 准备模型 #\r首先将模型按下面方法保存，放到项目resources中 import torch # An instance of your model. model = MyModel(num_classes = 80) # Switch the model to eval model model.eval() # An example input you would normally provide to your model\u0026#39;s forward() method. example = torch.rand(1, 3, 224, 224) # Use torch.jit.trace to generate a torch.jit.ScriptModule via tracing. traced_script_module = torch.jit.trace(model, example) # Save the TorchScript model traced_script_module.save(\u0026#34;model.pt\u0026#34;) 编写工具类，用于完成识别功能 public class HerbUtil { //规定输入尺寸 private static final int INPUT_SIZE = 224; //标签文件 一种类别名字占一行 private List\u0026lt;String\u0026gt; herbNames; //用于识别 Predictor\u0026lt;Image, Classifications\u0026gt; predictor; //模型 private Model model; public HerbUtil() { //加载标签到herbNames中 this.loadHerbNames(); //初始化模型工作 this.init(); } } 将标签文件放到resources中，载入标签 private void loadHerbNames() { BufferedReader reader = null; herbNames = new ArrayList\u0026lt;\u0026gt;(); try { InputStream in = HerbUtil.class.getClassLoader().getResourceAsStream(\u0026#34;names.txt\u0026#34;); reader = new BufferedReader(new InputStreamReader(in)); String name = null; while ((name = reader.readLine()) != null) { herbNames.add(name); } System.out.println(herbNames); } catch (Exception e) { e.printStackTrace(); } finally { if (reader != null) { try { reader.close(); } catch (IOException e) { e.printStackTrace(); } } } } 初始化模型 private void init() { Translator\u0026lt;Image, Classifications\u0026gt; translator = ImageClassificationTranslator.builder() //下面的transform根据自己的改 .addTransform(new RandomResizedCrop(INPUT_SIZE, INPUT_SIZE, 0.6, 1, 3. / 4, 4. / 3)) .addTransform(new ToTensor()) .addTransform(new Normalize( new float[] {0.5f, 0.5f, 0.5f}, new float[] {0.5f, 0.5f, 0.5f})) //如果你的模型最后一层没有经过softmax就启用它 .optApplySoftmax(true) //载入所有标签进去 .optSynset(herbNames) //最终显示概率最高的5个 .optTopK(5) .build(); //随便起名 Model model = Model.newInstance(\u0026#34;model\u0026#34;, Device.cpu()); try { InputStream inputStream = HerbUtil.class.getClassLoader().getResourceAsStream(\u0026#34;model.pt\u0026#34;); if (inputStream == null) { throw new RuntimeException(\u0026#34;找不到模型文件\u0026#34;); } model.load(inputStream); predictor = model.newPredictor(translator); } catch (Exception e) { e.printStackTrace(); } } 我开头提到的图片预处理 的代码 private Image resizeImage(InputStream inputStream) { BufferedImage input = null; try { input = ImageIO.read(inputStream); } catch (IOException e) { e.printStackTrace(); } int iw = input.getWidth(), ih = input.getHeight(); int w = 224, h = 224; double scale = Math.min(1. * w / iw, 1. * h / ih); int nw = (int) (iw * scale), nh = (int) (ih * scale); java.awt.Image img; //只有太长或太宽才会保留横纵比，填充颜色 boolean needResize = 1. * iw / ih \u0026gt; 1.4 || 1. * ih / iw \u0026gt; 1.4; if (needResize) { img = input.getScaledInstance(nw, nh, BufferedImage.SCALE_SMOOTH); } else { img = input.getScaledInstance(INPUT_SIZE, INPUT_SIZE, BufferedImage.SCALE_SMOOTH); } BufferedImage out = new BufferedImage(INPUT_SIZE, INPUT_SIZE, BufferedImage.TYPE_INT_RGB); Graphics g = out.getGraphics(); //先将整个224*224区域填充128 128 128颜色 g.setColor(new Color(128, 128, 128)); g.fillRect(0, 0, INPUT_SIZE, INPUT_SIZE); out.getGraphics().drawImage(img, 0, needResize ? (INPUT_SIZE - nh) / 2 : 0, null); ByteArrayOutputStream outputStream = new ByteArrayOutputStream(); try { ImageOutputStream imageOutputStream = ImageIO.createImageOutputStream(outputStream); ImageIO.write(out, \u0026#34;jpg\u0026#34;, imageOutputStream); //去D盘看效果 //ImageIO.write(out, \u0026#34;jpg\u0026#34;, new File(\u0026#34;D:\\\\out.jpg\u0026#34;)); InputStream is = new ByteArrayInputStream(outputStream.toByteArray()); return ImageFactory.getInstance().fromInputStream(is); } catch (IOException e) { e.printStackTrace(); throw new RuntimeException(\u0026#34;图片转换失败\u0026#34;); } } 识别功能 public List\u0026lt;Classifications.Classification\u0026gt; predict(InputStream inputStream) { List\u0026lt;Classifications.Classification\u0026gt; result = new ArrayList\u0026lt;\u0026gt;(); Image input = this.resizeImage(inputStream); try { Classifications output = predictor.predict(input); System.out.println(\u0026#34;推测为：\u0026#34; + output.best().getClassName() + \u0026#34;, 概率：\u0026#34; + output.best().getProbability()); System.out.println(output); result = output.topK(); } catch (Exception e) { e.printStackTrace(); } return result; } 3. 测试 #\r@Test public void test7() { HerbUtil herbUtil = new HerbUtil(); String path = \u0026#34;E:\\\\深度学习专用\\\\data\\\\train\\\\当归\\\\24.jpeg\u0026#34;; try { File file = new File(path); InputStream inputStream = new FileInputStream(file); herbUtil.predict(inputStream); } catch (Exception e) { e.printStackTrace(); } } 输出：\n加入到项目中后，工具类直接Autowire注入或者方法都写static的，Controller接收前端MultipartFile，将其inputstream用于推测\n如果你想加载网络图片，那就去网上搜索怎么把它转成inputstream吧\n测试多线程一起predict时报错了\n更新 #\r当我打包成jar到centos7的linux中运行时，报错UnsatisfiedLinkError，经过大神的指导，问题出来我引的依赖。\n修改后的依赖：\n\u0026lt;properties\u0026gt; \u0026lt;java.version\u0026gt;8\u0026lt;/java.version\u0026gt; \u0026lt;jna.version\u0026gt;5.3.0\u0026lt;/jna.version\u0026gt; \u0026lt;/properties\u0026gt; \u0026lt;dependencies\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;ai.djl.pytorch\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;pytorch-engine\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;0.16.0\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;ai.djl.pytorch\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;pytorch-native-cpu-precxx11\u0026lt;/artifactId\u0026gt; \u0026lt;classifier\u0026gt;linux-x86_64\u0026lt;/classifier\u0026gt; \u0026lt;version\u0026gt;1.9.1\u0026lt;/version\u0026gt; \u0026lt;scope\u0026gt;runtime\u0026lt;/scope\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;ai.djl.pytorch\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;pytorch-jni\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;1.9.1-0.16.0\u0026lt;/version\u0026gt; \u0026lt;scope\u0026gt;runtime\u0026lt;/scope\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-web\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;/dependencies\u0026gt; ","date":"13 January 2023","externalUrl":null,"permalink":"/blog/posts/java/java%E8%B0%83%E7%94%A8pytorch%E6%A8%A1%E5%9E%8B%E8%BF%9B%E8%A1%8C%E5%9B%BE%E5%83%8F%E8%AF%86%E5%88%AB/","section":"Posts","summary":"Java 中通过 DJL 调用 Pytorch 模型完成图像识别","title":"Java调用Pytorch模型进行图像识别","type":"posts"},{"content":"","date":"28 December 2022","externalUrl":null,"permalink":"/blog/tags/easyexcel/","section":"Tags","summary":"","title":"Easyexcel","type":"tags"},{"content":"","date":"28 December 2022","externalUrl":null,"permalink":"/blog/tags/spider/","section":"Tags","summary":"","title":"Spider","type":"tags"},{"content":"有需求，查2022年11月以来的某个博主发的博文，导入到Excel中\n1、导包 #\r用到hutools的HttpUtil和alibaba的EasyExcel\n\u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;cn.hutool\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;hutool-all\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt; 5.3.4\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;com.alibaba\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;easyexcel\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;3.0.5\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; 2、查看接口地址 #\r来到某个博主的个人页面，F12打开控制台，切换到网络，刷新页面，找到红色的这个请求，他就是获取博文的接口，uid就是这个博主的id。\n复制url，以及cookie\n3、写代码获取博文 #\rpublic static void main(String[] args) throws ParseException { String url = \u0026#34;https://weibo.com/ajax/statuses/mymblog?uid=1642512402\u0026amp;page=%s\u0026amp;feature=0\u0026#34;; SimpleDateFormat dateFormat = new SimpleDateFormat(\u0026#34;yyyy-MM-dd HH:mm:ss\u0026#34;); //爬到这个日期就停下来 Date stopDate = dateFormat.parse(\u0026#34;2022-11-01 00:00:00\u0026#34;); for (int i = 1;; i++) { try { HttpResponse response = HttpUtil.createGet(String.format(url, i)) .header(\u0026#34;User-Agent\u0026#34;, \u0026#34;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:108.0) Gecko/20100101 Firefox/108.0\u0026#34;) .header(\u0026#34;Cookie\u0026#34;, \u0026#34;你的cookie，最好登录一下再复制\u0026#34;) .execute(); JSONArray list = JSONObject.parseObject(response.body()).getJSONObject(\u0026#34;data\u0026#34;) .getJSONArray(\u0026#34;list\u0026#34;); boolean stop = false; for (Object o : list) { JSONObject data = (JSONObject) o; Date created = new Date(data.getString(\u0026#34;created_at\u0026#34;)); //到指定日期了，就可以结束了 if (created.before(stopDate)) { stop = true; break; } //替换掉sb超链接、图片啥的 String text = data.getString(\u0026#34;text\u0026#34;).replaceAll(\u0026#34;\u0026lt;[^\u0026lt;\u0026gt;]*\u0026gt;\u0026#34;, \u0026#34;\u0026#34;); String repost = data.getString(\u0026#34;reposts_count\u0026#34;); String comment = data.getString(\u0026#34;comments_count\u0026#34;); String like = data.getString(\u0026#34;attitudes_count\u0026#34;); System.out.println(dateFormat.format(created) + \u0026#34; \u0026#34; + text); } response.close(); if (stop) { break; } //记得sleep一会，不然会被禁ip几分钟 Thread.sleep(700); } catch (Exception e) { e.printStackTrace(); } } } 4、写Excel #\r首先创建ExcelData类\nimport com.alibaba.excel.annotation.ExcelProperty; import lombok.Data; import lombok.experimental.Accessors; import java.util.Date; @Data @Accessors(chain = true) public class ExcelData { @ExcelProperty(\u0026#34;发布日期\u0026#34;) private Date date; @ExcelProperty(\u0026#34;内容\u0026#34;) private String content; @ExcelProperty(\u0026#34;点赞\u0026#34;) private Long like; @ExcelProperty(\u0026#34;评论\u0026#34;) private Long comment; @ExcelProperty(\u0026#34;转发\u0026#34;) private Long repost; } 然后加入写excel的代码\npublic static void main(String[] args) throws ParseException { String url = \u0026#34;https://weibo.com/ajax/statuses/mymblog?uid=1699432410\u0026amp;page=%s\u0026amp;feature=0\u0026#34;; List\u0026lt;ExcelData\u0026gt; excelDataList = new ArrayList\u0026lt;\u0026gt;(); SimpleDateFormat dateFormat = new SimpleDateFormat(\u0026#34;yyyy-MM-dd HH:mm:ss\u0026#34;); Date stopDate = dateFormat.parse(\u0026#34;2022-11-01 00:00:00\u0026#34;); for (int i = 1;; i++) { try { HttpResponse response = HttpUtil.createGet(String.format(url, i)) .header(\u0026#34;User-Agent\u0026#34;, \u0026#34;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:108.0) Gecko/20100101 Firefox/108.0\u0026#34;) .header(\u0026#34;Cookie\u0026#34;, \u0026#34;你的cookie\u0026#34;) .execute(); JSONArray list = JSONObject.parseObject(response.body()).getJSONObject(\u0026#34;data\u0026#34;) .getJSONArray(\u0026#34;list\u0026#34;); boolean stop = false; for (Object o : list) { JSONObject data = (JSONObject) o; Date created = new Date(data.getString(\u0026#34;created_at\u0026#34;)); if (created.before(stopDate)) { stop = true; break; } String text = data.getString(\u0026#34;text\u0026#34;).replaceAll(\u0026#34;\u0026lt;[^\u0026lt;\u0026gt;]*\u0026gt;\u0026#34;, \u0026#34;\u0026#34;); String repost = data.getString(\u0026#34;reposts_count\u0026#34;); String comment = data.getString(\u0026#34;comments_count\u0026#34;); String like = data.getString(\u0026#34;attitudes_count\u0026#34;); System.out.println(dateFormat.format(created)); ExcelData excelData = new ExcelData() .setDate(created) .setLike(Long.parseLong(like)) .setComment(Long.parseLong(comment)) .setRepost(Long.parseLong(repost)) .setContent(text); excelDataList.add(excelData); } response.close(); if (stop) { break; } Thread.sleep(700); } catch (Exception e) { e.printStackTrace(); } } System.out.println(\u0026#34;读取完毕开始写数据\u0026#34;); EasyExcel.write(\u0026#34;D:/新华社.xlsx\u0026#34;, ExcelData.class) .sheet(\u0026#34;Sheet1\u0026#34;) .doWrite(excelDataList); } 如果像下面这样报错，在vm options里添加\n--add-opens java.base/java.lang=ALL-UNNAMED 具体报错内容：\ncom.alibaba.excel.exception.ExcelGenerateException: java.lang.ExceptionInInitializerError\rat com.alibaba.excel.write.ExcelBuilderImpl.addContent(ExcelBuilderImpl.java:64)\rat com.alibaba.excel.ExcelWriter.write(ExcelWriter.java:161)\rat com.alibaba.excel.write.ExcelBuilderImpl.addContent(ExcelBuilderImpl.java:58)\r... 29 more\rCaused by: java.lang.reflect.InaccessibleObjectException: Unable to make protected final java.lang.Class java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int,java.security.ProtectionDomain) throws java.lang.ClassFormatError accessible: module java.base does not \u0026quot;opens java.lang\u0026quot; to unnamed module @5b80350b\rat java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:357)\rat java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:297)\rat java.base/java.lang.reflect.Method.checkCanSetAccessible(Method.java:199)\rat java.base/java.lang.reflect.Method.setAccessible(Method.java:193)\rat net.sf.cglib.core.ReflectUtils$2.run(ReflectUtils.java:56)\rat java.base/java.security.AccessController.doPrivileged(AccessController.java:312)\rat net.sf.cglib.core.ReflectUtils.\u0026lt;clinit\u0026gt;(ReflectUtils.java:46)\r... 41 more\r","date":"28 December 2022","externalUrl":null,"permalink":"/blog/posts/java/%E7%94%A8java%E7%88%AC%E5%BE%AE%E5%8D%9A%E6%95%B0%E6%8D%AE%E5%AF%BC%E5%85%A5%E5%88%B0excel%E4%B8%AD/","section":"Posts","summary":"用Java爬微博数据导入到Excel中","title":"用Java爬微博数据导入到Excel中","type":"posts"},{"content":"","date":"22 September 2022","externalUrl":null,"permalink":"/blog/tags/c%23/","section":"Tags","summary":"","title":"C#","type":"tags"},{"content":"最近做笔记需要一个截图后获取图中文字的轻型程序，最好直接按快捷键就能识别并将文字自动复制。网上的应该都是要钱的，或者东西太杂了看着乱得慌，于是决定自己写。我c#只稍微学了一点，讲的不好的地方代码不规范的地方见谅。\n我使用的是百度的文字识别api，请先自己去申请一下资源，免费的，一个月免费识别1000次好像是。然后截图直接用的Snipaste这个软件，贼好用。\napi主页：https://ai.baidu.com/tech/ocr/general\n然后领取免费资源，创建应用使用。\n一、创建项目 #\r创建一个窗口应用项目\n然后右键引用 - 管理NuGet程序包，安装Newtonsoft.Json和System.Net.Http\n二、编写基本识别代码 #\r首先去百度api的控制台获取一下api key和secret key，网址：百度智能云-登录\n然后进入文档，里面请求的基本代码已经给我们写好了，直接复制就ok了，文字识别我们用高精度版的。\n获取AccessToken文档：https://ai.baidu.com/ai-doc/REFERENCE/Ck3dwjhhu\n文字识别文档：https://ai.baidu.com/ai-doc/OCR/1k3h7y3db\nMainForm.cs\nusing System; using System.Collections.Generic; using System.Net.Http; using System.Text; using System.Windows.Forms; using Newtonsoft.Json; using System.Text.RegularExpressions; using System.IO; using System.Net; using System.Web; namespace TextRecognition { public partial class MainForm : Form { public MainForm() { InitializeComponent(); } //调用接口所需令牌 string ACCESS_TOKEN = \u0026#34;\u0026#34;; //应用的api key string API_KEY = \u0026#34;控制台查询\u0026#34;; //应用的secret key string API_SECRET = \u0026#34;控制台查询\u0026#34;; //存储识别结果 string resultText = \u0026#34;\u0026#34;; private void MainForm_Load(object sender, EventArgs e) { getAccessToken(); } //获取AccessToken private void getAccessToken() { String authHost = \u0026#34;https://aip.baidubce.com/oauth/2.0/token\u0026#34;; HttpClient client = new HttpClient(); List\u0026lt;KeyValuePair\u0026lt;String, String\u0026gt;\u0026gt; paraList = new List\u0026lt;KeyValuePair\u0026lt;string, string\u0026gt;\u0026gt;(); paraList.Add(new KeyValuePair\u0026lt;string, string\u0026gt;(\u0026#34;grant_type\u0026#34;, \u0026#34;client_credentials\u0026#34;)); paraList.Add(new KeyValuePair\u0026lt;string, string\u0026gt;(\u0026#34;client_id\u0026#34;, API_KEY)); paraList.Add(new KeyValuePair\u0026lt;string, string\u0026gt;(\u0026#34;client_secret\u0026#34;, API_SECRET)); HttpResponseMessage response = client.PostAsync(authHost, new FormUrlEncodedContent(paraList)).Result; String result = response.Content.ReadAsStringAsync().Result; //解析返回的json结果 Dictionary\u0026lt;string, string\u0026gt; res = JsonConvert.DeserializeObject\u0026lt;Dictionary\u0026lt;string, string\u0026gt;\u0026gt;(result); res.TryGetValue(\u0026#34;access_token\u0026#34;, out ACCESS_TOKEN); } //处理识别功能被用户触发 private void doRecognize() { IDataObject iData = Clipboard.GetDataObject(); //只处理复制内容是图片的情况 if (iData.GetDataPresent(DataFormats.Bitmap)) { var image = Clipboard.GetImage(); MemoryStream ms = new MemoryStream(); image.Save(ms, System.Drawing.Imaging.ImageFormat.Png); byte[] arr = new byte[ms.Length]; ms.Position = 0; ms.Read(arr, 0, (int)ms.Length); string base64 = Convert.ToBase64String(arr); try { recognize(base64); //把识别结果复制到剪切板 Clipboard.SetText(resultText); } catch (Exception ex) { resultText = \u0026#34;异常：\u0026#34; + ex.ToString(); } } } //调用api识别图片中的文字 private void recognize(string base64) { string host = \u0026#34;https://aip.baidubce.com/rest/2.0/ocr/v1/accurate_basic?access_token=\u0026#34; + ACCESS_TOKEN; Encoding encoding = Encoding.Default; HttpWebRequest request = (HttpWebRequest)WebRequest.Create(host); request.Method = \u0026#34;post\u0026#34;; request.KeepAlive = true; // 图片的base64编码 String str = \u0026#34;image=\u0026#34; + HttpUtility.UrlEncode(base64); byte[] buffer = encoding.GetBytes(str); request.ContentLength = buffer.Length; request.GetRequestStream().Write(buffer, 0, buffer.Length); HttpWebResponse response = (HttpWebResponse)request.GetResponse(); StreamReader reader = new StreamReader(response.GetResponseStream(), Encoding.UTF8); string result = reader.ReadToEnd(); //解析json太麻烦直接正则获取结果 string pattern = \u0026#34;\\\u0026#34;words\\\u0026#34;:\\\u0026#34;(.*?)\\\u0026#34;\u0026#34;; StringBuilder sb = new StringBuilder(); foreach (Match match in Regex.Matches(result, pattern)) { sb.AppendLine(match.Groups[1].ToString()); } resultText = sb.ToString(); Console.WriteLine(resultText); } } } 此时可以在窗口里添加个按钮测试一下doRecognize识别功能，用截图工具截个图，再点按钮，可以看到他已经识别完成并且给我们把结果复制到剪切板了\n三、监听快捷键按下 #\r我想实现当按下alt+3的时候执行doReconize函数，需要全局hook键盘。\n首先在项目里创建类文件Hook.cs，然后编辑内容\nHook.cs\nusing System; using System.Collections.Generic; using System.Diagnostics; using System.Linq; using System.Runtime.InteropServices; using System.Text; using System.Threading.Tasks; using System.Windows.Forms; namespace TextRecognition { class Hook { [DllImport(\u0026#34;user32.dll\u0026#34;)] public static extern int SetWindowsHookEx(int idHook, HookProc lpfn, IntPtr hInstance, int threadId); [DllImport(\u0026#34;user32.dll\u0026#34;, CharSet = CharSet.Auto, CallingConvention = CallingConvention.StdCall)] public static extern bool UnhookWindowsHookEx(int idHook); [DllImport(\u0026#34;user32.dll\u0026#34;)] public static extern int CallNextHookEx(int idHook, int nCode, int wParam, IntPtr lParam); [DllImport(\u0026#34;kernel32.dll\u0026#34;)] public static extern int GetCurrentThreadId(); [DllImport(\u0026#34;kernel32.dll\u0026#34;)] public static extern IntPtr GetModuleHandle(string name); [DllImport(\u0026#34;User32.dll\u0026#34;)] public static extern void keybd_event(Byte bVk, Byte bScan, Int32 dwFlags, Int32 dwExtraInfo); //键盘hook public const int WH_KEYBOARD_LL = 13; public delegate int HookProc(int nCode, int wParam, IntPtr lParam); //回调 HookProc KeyBoardHookProcedure; public int hHook; //hook到的消息结构 [StructLayout(LayoutKind.Sequential)] public class KeyBoardHookStruct { public int vkCode; public int scanCode; public int flags; public int time; public int dwExtraInfo; } //开启hook public void Hook_Start() { KeyBoardHookProcedure = new HookProc(KeyBoardHookProc); hHook = SetWindowsHookEx(WH_KEYBOARD_LL, KeyBoardHookProcedure, GetModuleHandle(Process.GetCurrentProcess().MainModule.ModuleName), 0); } //关闭hook public void Hook_Clear() { bool retKeyboard = true; retKeyboard = UnhookWindowsHookEx(hHook); hHook = 0; } //键盘hook到之后的操作 private int KeyBoardHookProc(int nCode, int wParam, IntPtr lParam) { if (nCode \u0026gt;= 0) { KeyBoardHookStruct kbh = (KeyBoardHookStruct)Marshal.PtrToStructure(lParam, typeof(KeyBoardHookStruct)); //如果按下alt + 3 if (kbh.vkCode == (int)Keys.D3 \u0026amp;\u0026amp; (int)Control.ModifierKeys == (int)Keys.Alt) { Console.WriteLine(\u0026#34;按了alt+3\u0026#34;); //键盘消息不再往下传递 return 1; } } return CallNextHookEx(hHook, nCode, wParam, lParam); } } } 再来看一下控制台输出，发现可以获取到按下的事件了，如果想换成别的组合键可以上网搜一下该怎么写。\n四、按键触发doRecognize函数 #\r我们按下alt+3被hook到之后，要调用MainForm.cs里定义的doRecognize函数。当时学的时候没学太多，只记得个委托什么什么的可以实现这样的功能，我就用这个委托实现了。当然也有别的方式，比如直接抽离成工具类什么的。\n我讲不大清楚，大家既然都用c#了应该比我懂得多，我就直接放代码了。\nHook.cs\nusing System; using System.Collections.Generic; using System.Diagnostics; using System.Linq; using System.Runtime.InteropServices; using System.Text; using System.Threading.Tasks; using System.Windows.Forms; namespace 文字识别 { class KeyHooks { //以下只展示新增or修改的部分 public delegate void recHandler(object sender, EventArgs e); public event recHandler handler; //键盘hook到之后的操作 private int KeyBoardHookProc(int nCode, int wParam, IntPtr lParam) { if (nCode \u0026gt;= 0) { KeyBoardHookStruct kbh = (KeyBoardHookStruct)Marshal.PtrToStructure(lParam, typeof(KeyBoardHookStruct)); if (kbh.vkCode == (int)Keys.D3 \u0026amp;\u0026amp; (int)Control.ModifierKeys == (int)Keys.Alt \u0026amp;\u0026amp; this.handler != null) { Console.WriteLine(\u0026#34;按了alt+3\u0026#34;); this.handler(this, new EventArgs()); return 1; } } return CallNextHookEx(hHook, nCode, wParam, lParam); } } } MainForm.cs\nusing System; using System.Collections.Generic; using System.Net.Http; using System.Text; using System.Windows.Forms; using Newtonsoft.Json; using System.Text.RegularExpressions; using System.IO; using System.Net; using System.Web; namespace TextRecognition { public partial class MainForm : Form { //也只展示新增、修改部分 private void MainForm_Load(object sender, EventArgs e) { getAccessToken(); hook.Hook_Start(); hook.handler += new Hook.recHandler(handleRec); } public void handleRec(object sender, EventArgs e) { doRecognize(); } } } 五、优化 #\r我想让他一直在后台，别给我一启动蹦出一个窗口，我还要避免这个程序重复运行。\n1.设置后台运行 #\r首先我们把NotifyIcon这个组件拖入到窗口里，再拖个ContextMenuStrip来配置右键展示的菜单\n设置一下NotifyIcon的icon，随便找个xxx.ico文件吧，然后修改Text属性，再把ContextMenuStrip属性修改为刚添加的那个context menu strip，然后这个就能在右下角看到了（这个b水印真烦啊）\n再编辑一下ContextMenuStrip，我创建了复制上一次识别结果和退出两个选项，双击他们给他们添加点击事件\nprivate void copyMenuItem_Click(object sender, EventArgs e) { Clipboard.SetText(resultText); } private void exitMenuItem_Click(object sender, EventArgs e) { this.Close(); } 再让窗体隐藏，将主窗体的ShowlnTaskbar属性设为 False,将其 WindowState属性设为 Minimized,程序即可变成后台运行程序。\n2.防止重复开启 #\r很简单，在Program.cs里写代码\nusing System; using System.Collections.Generic; using System.Linq; using System.Threading.Tasks; using System.Windows.Forms; namespace TextRecognition { static class Program { /// \u0026lt;summary\u0026gt; /// 应用程序的主入口点。 /// \u0026lt;/summary\u0026gt; [STAThread] static void Main() { bool unique; Console.WriteLine(Application.ProductName); System.Threading.Mutex mutex = new System.Threading.Mutex(true, Application.ProductName, out unique); if (!unique) { MessageBox.Show(\u0026#34;请勿重复运行此程序！\u0026#34;, \u0026#34;错误\u0026#34;, MessageBoxButtons.OK, MessageBoxIcon.Asterisk); return; } Application.EnableVisualStyles(); Application.SetCompatibleTextRenderingDefault(false); Application.Run(new MainForm()); } } } ok了，运行一下玩玩把\n","date":"22 September 2022","externalUrl":null,"permalink":"/blog/posts/csharp/c%23%E5%86%99%E4%B8%80%E4%B8%AA%E5%90%8E%E5%8F%B0%E8%BF%90%E8%A1%8C%E7%9A%84%E6%96%87%E5%AD%97%E8%AF%86%E5%88%AB%E5%B7%A5%E5%85%B7/","section":"Posts","summary":"C#写一个后台运行的文字识别工具，通过百度OCR的API实现文字识别","title":"C#写一个后台运行的文字识别工具","type":"posts"},{"content":"我当前在做的项目需求：在xx单子中提取出我想要的关键词，涉及中文分词的内容，可以借助IK分词器实现此功能。\n1、引入依赖 #\rik用于分词，commons-io用来读取文件内容（我懒）\n\u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;com.janeluo\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;ikanalyzer\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;2012_u6\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;commons-io\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;commons-io\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;2.8.0\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; 注意：如果项目使用了ElasticSearch，可能会出现冲突，需根据你的情况手动排除，如下\n\u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;com.janeluo\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;ikanalyzer\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;2012_u6\u0026lt;/version\u0026gt; \u0026lt;exclusions\u0026gt; \u0026lt;exclusion\u0026gt; \u0026lt;groupId\u0026gt;org.apache.lucene\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;lucene-core\u0026lt;/artifactId\u0026gt; \u0026lt;/exclusion\u0026gt; \u0026lt;exclusion\u0026gt; \u0026lt;groupId\u0026gt;org.apache.lucene\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;lucene-analyzers-common\u0026lt;/artifactId\u0026gt; \u0026lt;/exclusion\u0026gt; \u0026lt;exclusion\u0026gt; \u0026lt;groupId\u0026gt;com.google.guava\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;guava\u0026lt;/artifactId\u0026gt; \u0026lt;/exclusion\u0026gt; \u0026lt;/exclusions\u0026gt; \u0026lt;/dependency\u0026gt; 2、创建自己的词典 #\r创建文件，在里面输入自己想要扩充的词语，放到resources中，命名如“keywords.dic”\n3、创建分词工具类 #\rpackage com.iherb.user.util; import org.apache.commons.io.IOUtils; import org.wltea.analyzer.cfg.Configuration; import org.wltea.analyzer.cfg.DefaultConfig; import org.wltea.analyzer.core.IKSegmenter; import org.wltea.analyzer.core.Lexeme; import org.wltea.analyzer.dic.Dictionary; import java.io.StringReader; import java.nio.charset.StandardCharsets; import java.util.*; public class KeywordUtil { Configuration cfg; List\u0026lt;String\u0026gt; expandWords = new ArrayList\u0026lt;\u0026gt;(); /** * 每个词的最小长度 */ private static final int MIN_LEN = 2; KeywordUtil() { cfg = DefaultConfig.getInstance(); cfg.setUseSmart(true); //设置useSmart标志位 true-智能切分 false-细粒度切分 boolean flag = loadDictionaries(\u0026#34;keywords.dic\u0026#34;); if (!flag) { throw new RuntimeException(\u0026#34;读取失败\u0026#34;); } Dictionary.initial(cfg); Dictionary.getSingleton().addWords(expandWords); //词典中加入自定义单词 } /** * 加载自定义词典，若无想要添加的词则无需调用，使用默认的词典 * @param filenames * @return */ private boolean loadDictionaries(String... filenames) { try { for (String filename : filenames) { expandWords.addAll( IOUtils.readLines( KeywordUtil.class.getClassLoader().getResourceAsStream(filename), StandardCharsets.UTF_8 ) ); } return true; } catch (Exception e) { e.printStackTrace(); } return false; } /** * 提取词语，结果将按频率排序 * @param text 待提取的文本 * @return 提取出的词 */ public List\u0026lt;String\u0026gt; extract(String text) { StringReader reader = new StringReader(text); IKSegmenter ikSegmenter = new IKSegmenter(reader, cfg); Lexeme lex; Map\u0026lt;String, Integer\u0026gt; countMap = new HashMap\u0026lt;\u0026gt;(); try { while ((lex = ikSegmenter.next()) != null) { String word = lex.getLexemeText(); if (word.length() \u0026gt;= MIN_LEN) { //取出的词至少#{MIN_LEN}个字 countMap.put(word, countMap.getOrDefault(word, 0) + 1); } } List\u0026lt;String\u0026gt; result = new ArrayList\u0026lt;\u0026gt;(countMap.keySet()); //根据词出现频率从大到小排序 result.sort((w1, w2) -\u0026gt; countMap.get(w2) - countMap.get(w1)); return result; } catch (Exception e) { e.printStackTrace(); } return Collections.emptyList(); } /** * 提取存在于我扩充词典的词 * @param num 需要提取的词个数 * @return */ public List\u0026lt;String\u0026gt; getKeywords(String text, Integer num) { List\u0026lt;String\u0026gt; words = extract(text); List\u0026lt;String\u0026gt; result = new ArrayList\u0026lt;\u0026gt;(); int count = 0; for (String word : words) { if (expandWords.contains(word)) { result.add(word); if (++count == num) { break; } } } return result; } public static void main(String[] args) { String text = \u0026#34;哈哈无花果翠云草酢浆草是什么，。我是帅哥666无花果真好吃还有北沙参穿心莲翠云草，草豆蔻和蝉蜕酢浆草也不错的\u0026#34;; KeywordUtil keywordUtil = new KeywordUtil(); List\u0026lt;String\u0026gt; keywords = keywordUtil.getKeywords(text, 5); keywords.forEach(System.out::println); } } 4、测试 #\r","date":"19 August 2022","externalUrl":null,"permalink":"/blog/posts/java/%E4%BD%BF%E7%94%A8java%E4%B8%AD%E6%96%87%E5%88%86%E8%AF%8D%E6%96%87%E6%9C%AC%E5%85%B3%E9%94%AE%E8%AF%8D%E6%8F%90%E5%8F%96/","section":"Posts","summary":"通过IK分词器和自定义字典实现在java中文分词\u0026amp;\u0026amp;文本关键词提取","title":"使用java中文分词\u0026\u0026文本关键词提取","type":"posts"},{"content":"es版本7.6.2\n修改前显示效果如下\n{ \u0026#34;took\u0026#34;: 18, \u0026#34;timed_out\u0026#34;: false, \u0026#34;_shards\u0026#34;: { \u0026#34;total\u0026#34;: 1, \u0026#34;successful\u0026#34;: 1, \u0026#34;skipped\u0026#34;: 0, \u0026#34;failed\u0026#34;: 0 }, \u0026#34;hits\u0026#34;: { \u0026#34;total\u0026#34;: { \u0026#34;value\u0026#34;: 12, \u0026#34;relation\u0026#34;: \u0026#34;eq\u0026#34; }, \u0026#34;max_score\u0026#34;: 9.158138, \u0026#34;hits\u0026#34;: [ { \u0026#34;_index\u0026#34;: \u0026#34;herb\u0026#34;, \u0026#34;_type\u0026#34;: \u0026#34;_doc\u0026#34;, \u0026#34;_id\u0026#34;: \u0026#34;TgCJgIIBvi9Bv3av3GtL\u0026#34;, \u0026#34;_score\u0026#34;: 9.158138, \u0026#34;_source\u0026#34;: { \u0026#34;alias\u0026#34;: [ \u0026#34;矾石\u0026#34;, \u0026#34;理石\u0026#34;, \u0026#34;白君\u0026#34;, \u0026#34;矾石\u0026#34;, \u0026#34;明矾\u0026#34;, \u0026#34;羽泽\u0026#34;], \u0026#34;id\u0026#34;: 33, \u0026#34;image\u0026#34;: \u0026#34;http://www.zhongyoo.com/uploads/allimg/140807/1-140PG1223I92.jpg\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;白矾\u0026#34;, \u0026#34;text\u0026#34;: \u0026#34;{\\\u0026#34;中药名\\\u0026#34;:\\\u0026#34;白矾 baifan\\\u0026#34;,\\\u0026#34;别名\\\u0026#34;:\\\u0026#34;矾石、理石、白君、矾石、明矾、羽泽。\\\u0026#34;,\\\u0026#34;英 }, \u0026#34;highlight\u0026#34;: { \u0026#34;name.pinyin\u0026#34;: [ \u0026#34;\u0026lt;em\u0026gt;\u0026lt;/em\u0026gt;\u0026lt;em\u0026gt;\u0026lt;/em\u0026gt;白矾\u0026#34; ] } }, { .... } ] } } Day 2 - ES 6.x拼音分词高亮爬坑记 - Elastic 中文社区\n参考上面这篇文章，对原本的setting进行了修改\n\u0026#34;analyzer\u0026#34;: { \u0026#34;pinyin_analyzer\u0026#34;: { \u0026#34;tokenizer\u0026#34;: \u0026#34;my_pinyin\u0026#34; } }, \u0026#34;tokenizer\u0026#34;: { \u0026#34;my_pinyin\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;pinyin\u0026#34;, \u0026#34;keep_separate_first_letter\u0026#34;: false, \u0026#34;keep_full_pinyin\u0026#34;: true, \u0026#34;keep_original\u0026#34;: true, \u0026#34;limit_first_letter_length\u0026#34;: 16, \u0026#34;lowercase\u0026#34;: true, \u0026#34;ignore_pinyin_offset\u0026#34;: false, //新加的一句 \u0026#34;remove_duplicated_term\u0026#34;: true } } 效果：\n","date":"9 August 2022","externalUrl":null,"permalink":"/blog/posts/middleware/elasticsearch%E4%B8%AD%E6%96%87%E6%8B%BC%E9%9F%B3%E5%90%8E%E6%97%A0%E6%B3%95%E9%AB%98%E4%BA%AE/","section":"Posts","summary":"ElasticSearch中文拼音后无法高亮","title":"ElasticSearch中文拼音后无法高亮","type":"posts"},{"content":"","date":"9 August 2022","externalUrl":null,"permalink":"/blog/tags/middleware/","section":"Tags","summary":"","title":"Middleware","type":"tags"},{"content":"","date":"13 June 2022","externalUrl":null,"permalink":"/blog/posts/","section":"Posts","summary":"","title":"Posts","type":"posts"},{"content":"","date":"21 May 2022","externalUrl":null,"permalink":"/blog/tags/redis/","section":"Tags","summary":"","title":"Redis","type":"tags"},{"content":"本文演示一主二从。\n先说一下遇到的问题。我看网上说想配置哨兵，必须让启动redis的docker网络模式为host，否则无法访问到从还是什么的。我指定--network host后无法外网访问，redis desktop manager连不上redis了，后来发现我这个新克隆的机器没关防火墙，关上就好了。\n1.配置主从 #\rdocker pull一下redis\nmaster\nmkdir -p /mydata/redis/6379/conf mkdir -p /mydata/redis/6379/data touch /mydata/redis/6379/conf/redis.conf echo \u0026#34;appendonly yes\u0026#34; \u0026gt;\u0026gt; /mydata/redis/6379/conf/redis.conf docker run --network host --name redis6379 -v /mydata/redis/6379/data:/data -v /mydata/redis/6379/conf/redis.conf:/etc/redis/redis.conf -d redis redis-server /etc/redis/redis.conf --port 6379 slave\n#slave1 mkdir -p /mydata/redis/6380/conf mkdir -p /mydata/redis/6380/data touch /mydata/redis/6380/conf/redis.conf echo \u0026#34;appendonly yes\u0026#34; \u0026gt;\u0026gt; /mydata/redis/6380/conf/redis.conf docker run --network host --name redis6380 -v /mydata/redis/6380/data:/data -v /mydata/redis/6380/conf/redis.conf:/etc/redis/redis.conf -d redis redis-server /etc/redis/redis.conf --port 6380 --slaveof 192.168.243.4 6379 #slave2 mkdir -p /mydata/redis/6381/conf mkdir -p /mydata/redis/6381/data touch /mydata/redis/6381/conf/redis.conf echo \u0026#34;appendonly yes\u0026#34; \u0026gt;\u0026gt; /mydata/redis/6381/conf/redis.conf docker run --network host --name redis6381 -v /mydata/redis/6381/data:/data -v /mydata/redis/6381/conf/redis.conf:/etc/redis/redis.conf -d redis redis-server /etc/redis/redis.conf --port 6381 --slaveof 192.168.243.4 6379 查看配置：\n#主 docker exec -it redis6379 redis-cli \u0026gt;info replication #从 docker exec -it redis6380 redis-cli -p 6380 \u0026gt;info replication 2. 配置哨兵 #\rmaster\nmkdir /mydata/redis/6379/sentinel mkdir /mydata/redis/6379/sentinel/log vi /mydata/redis/6379/sentinel/sentinel.conf #输入 port 26379 dir \u0026#34;/var/log/sentinel\u0026#34; logfile \u0026#34;/var/log/sentinel/26379.log\u0026#34; sentinel monitor mymaster 192.168.243.4 6379 1 #这里暂时设置成1 ![在这里插入图片描述](assets/9a303b239fec467385d2c8990cb3e629.png) #方便看一下主挂掉是什么效果 sentinel down-after-milliseconds mymaster 5000 sentinel parallel-syncs mymaster 1 sentinel failover-timeout mymaster 180000 #end docker run -d --name sentinel26379 -v /mydata/redis/6379/sentinel/sentinel.conf:/conf/sentinel.conf -v /mydata/redis/6379/sentinel/log:/var/log/sentinel --network host redis redis-sentinel /conf/sentinel.conf 先进行测试：\ndocker exec -it redis6379 redis-cli \u0026gt; SHUTDOWN \u0026gt; exit cat /mydata/redis/6379/sentinel/log/26379.log 此时redis6381已成为新的master\n再启动docker start redis6379 6379是slave了\n测试成功，修改上面配置文件的sentinel monitor mymaster 192.168.243.4 6379 2 数字配置为2，代表至少有2个Sentinel节点认为主节点不可达，那么这个不可达的判定才是客观的。为了防止票数相同，sentinel启动奇数个。\nslave\n#slave1 mkdir /mydata/redis/6380/sentinel mkdir /mydata/redis/6380/sentinel/log vi /mydata/redis/6380/sentinel/sentinel.conf #输入 port 26380 dir \u0026#34;/var/log/sentinel\u0026#34; logfile \u0026#34;/var/log/sentinel/26380.log\u0026#34; sentinel monitor mymaster 192.168.243.4 6380 2 sentinel down-after-milliseconds mymaster 5000 sentinel parallel-syncs mymaster 1 sentinel failover-timeout mymaster 180000 #end docker run -d --name sentinel26380 -v /mydata/redis/6380/sentinel/sentinel.conf:/conf/sentinel.conf -v /mydata/redis/6380/sentinel/log:/var/log/sentinel --network host redis redis-sentinel /conf/sentinel.conf #slave2 mkdir /mydata/redis/6381/sentinel mkdir /mydata/redis/6381/sentinel/log vi /mydata/redis/6381/sentinel/sentinel.conf #输入 port 26381 dir \u0026#34;/var/log/sentinel\u0026#34; logfile \u0026#34;/var/log/sentinel/26381.log\u0026#34; sentinel monitor mymaster 192.168.243.4 6381 2 sentinel down-after-milliseconds mymaster 5000 sentinel parallel-syncs mymaster 1 sentinel failover-timeout mymaster 180000 #end docker run -d --name sentinel26381 -v /mydata/redis/6381/sentinel/sentinel.conf:/conf/sentinel.conf -v /mydata/redis/6381/sentinel/log:/var/log/sentinel --network host redis redis-sentinel /conf/sentinel.conf 3.SpringBoot连接 #\rapplication.yml\nspring: redis: timeout: 5000 sentinel: master: mymaster nodes: 192.168.243.4:26379,192.168.243.4:26380,192.168.243.4:26381 controller\n@Autowired private StringRedisTemplate redisTemplate; @RequestMapping(\u0026#34;/redis\u0026#34;) public String redis() { redisTemplate.opsForValue().set(\u0026#34;test\u0026#34;, \u0026#34;121323123\u0026#34;); String test = redisTemplate.opsForValue().get(\u0026#34;test\u0026#34;); return \u0026#34;RESULT: \u0026#34; + test; } 访问localhost:8080/redis\n","date":"21 May 2022","externalUrl":null,"permalink":"/blog/posts/middleware/%E4%BD%BF%E7%94%A8docker%E9%85%8D%E7%BD%AEredis-sentinel%E5%93%A8%E5%85%B5/","section":"Posts","summary":"通过Docker配置Redis Sentinel哨兵","title":"使用Docker配置redis sentinel哨兵","type":"posts"},{"content":"\rES安装 #\r介绍：ELK是Elasticsearch、Logstash、Kibana的合体，市面上也成为Elastic Stack，是一个日志分析架构技术栈总称\n声明：JDK版本1.8+才可以\n安装：ElasticSearch客户端、可视化界面，整合的时候版本要对应\n1.下载es #\r官网：https://www.elastic.co/cn/\n华为云镜像：\nElasticSearch: https://mirrors.huaweicloud.com/elasticsearch/?C=N\u0026O=D\nlogstash: https://mirrors.huaweicloud.com/logstash/?C=N\u0026O=D\nkibana: https://mirrors.huaweicloud.com/kibana/?C=N\u0026O=D\n暂时先下载了7.6.2版本\n修改配置文件\n修改jvm的内存为256m 初始是1g\n运行elasticsearch.bat\n访问localhost:9200\n2. 安装可视化界面es head #\r网址：https://github.com/mobz/elasticsearch-head\n# Running with built in server\rgit clone git://github.com/mobz/elasticsearch-head.git\rcd elasticsearch-head`\rnpm install\rnpm run start\r`open` http://localhost:9100/\rThis will start a local webserver running on port 9100 serving elasticsearch-head\r# Running with docker\rfor Elasticsearch 5.x: `docker run -p 9100:9100 mobz/elasticsearch-head:5`\rfor Elasticsearch 2.x: `docker run -p 9100:9100 mobz/elasticsearch-head:2`\rfor Elasticsearch 1.x: `docker run -p 9100:9100 mobz/elasticsearch-head:1`\rfor fans of alpine there is `mobz/elasticsearch-head:5-alpine`\r`open` http://localhost:9100/\r此时打开控制台，发现报跨域错误\n配置跨域\n打开elasticsearch.yml，输入\nhttp.cors.enabled: true http.cors.allow-origin: \u0026#34;*\u0026#34; 配置完成后将显示es节点\n新建索引\n索引当成一个数据库， 文档当成库里的数据，这个head当成一个数据展示工具，后面所有的查询操作都在Kibana中进行\n3. 安装Kibana #\r网址：kibana: https://mirrors.huaweicloud.com/kibana/?C=N\u0026O=D\n版本要和ES版本一致\n启动比较耗时，访问localhost:5601\n打开Dev tools页面，可以测试连接\n汉化：打开kibana.yml，添加i18n.locale: “zh-CN”\nES核心概念 #\r1. 总体概述 #\rElasticsearch是面向文档的，ES中的一切都是JSON。关系型数据库 和 Elasticsearch对比：\nMysql存数据：建库 – 建表 – 建行(对应具体数据) – 写入字段\nES存数据：建索引 – 建立types(慢慢被弃用) – 创建文档(对应具体数据)\n物理设计：\nES在后台把每个索引划分成多个分片，每个分片可在集群中不同的服务器之间迁移，他一个人就是一个集群，不存在单个的ES\n逻辑设计：\n一个索引类型包含多个文档：文档1、文档2.当索引一篇文档时，可通过这样的顺序找到他：索引 – 类型 – 文档ID，通过这个组合我们就能所引导某个具体的文档。\n2. 文档 #\r文档就是一条条数据，类似行：\nuser:\r1 zhangsan 18\r2 wangwu 19\r3 zhaoliu 20\rES是面向文档的，所以索引搜索数据的最小单位就是文档。文档重要属性：\n自我包含，一篇文章同时包含字段和对应的值，即包含key:value 可以使层次型的，一个文档中包含文档，复杂的逻辑实体就是这么来的 灵活的结构，文档不依赖预先定义的模式，我们知道关系型数据库中，要提前定义字段才能使用，在elasticsearch中，对于字段是非常灵活的，有时候,我们可以忽略该字段，或者动态的添加一个新的字段。 3. 类型 #\r类型是文档的逻辑容器，类似表，就像关系型数据库一样，表格是行的容器。类型中对于字段的定义称为映射，比如name映射为字符串类型。我们说文档是无模式的，它们不需要拥有映射中所定义的所有字段，比如新增一个字段，那么elasticsearch是怎么做的呢?\nelasticsearch会自动的将新字段加入映射，但是这个字段的不确定它是什么类型，elasticsearch就开始猜，如果这个值是18，那么elasticsearch会认为它是整形。但是elasticsearch也可能猜不对，所以最安全的方式就是提前定义好所需要的映射，这点跟关系型数据库殊途同归了，先定义好字段，然后再使用。 4. 索引 #\r索引是映射类型的容器，类似数据库， elasticsearch中的索引是一个非常大的文档集合。 索引存储了映射类型的字段和其他设置。然后它们被存储到了各个分片上了。我们来研究下分片是如何工作的。\n5. 物理设计：节点和分片 如何工作 #\r创建新索引\n一个集群至少有一个节点，而一个节点就是一个elasricsearch进程，节点可以有多个索引默认的，如果你创建索引，那么索引将会有个5个分片(primary shard ,又称主分片)构成的，每一个主分片会有一个副本(replica shard，又称复制分片)\n上图是一个有3个节点的集群，可以看到主分片和对应的复制分片都不会在同一个节点内，这样有利于某个节点挂掉了，数据也不至于失。实际上，一个分片是一个Lucene索引（一个ElasticSearch索引包含多个Lucene索引） ，一个包含倒排索引的文件目录，倒排索引的结构使得elasticsearch在不扫描全部文档的情况下，就能告诉你哪些文档包含特定的关键字。不过，等等，倒排索引是什么鬼?\n6. 倒排索引 #\r搜索的核心需求是全文检索，全文检索简单来说就是要在大量文档中找到包含某个单词出现的位置，在传统关系型数据库中，数据检索只能通过 like 来实现，例如需要在酒店数据中查询名称包含公寓的酒店，需要通过如下 sql 实现：\nselect * from hotel_table where hotel_name like '%公寓%';\r这种实现方式实际会存在很多问题：\n无法使用数据库索引，需要全表扫描，性能差 搜索效果差，只能首尾位模糊匹配，无法实现复杂的搜索需求 无法得到文档与搜索条件的相关性 正排索引：是以文档对象的唯一 ID 作为索引，以文档内容作为记录的结构。\n倒排索引：Inverted index，指的是将文档内容中的单词作为索引，将包含该词的文档 ID 作为记录的结构。\n例子\n有两个文档\n文档 id content 1 苏州街维亚大厦 2 桔子酒店苏州街店 生成倒排索引：\n首先进行分词，这里两个文档包含的关键词有：苏州街、维亚大厦… 然后按照单词来作为索引，对应的文档 id 建立一个链表，就能构成上述的倒排索引结构。 Word 文档 id 苏州街 1,2 维亚大厦 1 维亚 1 桔子 2 酒店 2 大赛 1 有了倒排索引，能快速、灵活地实现各类搜索需求。整个搜索过程中我们不需要做任何文本的模糊匹配。\n例如，如果需要在上述两个文档中查询 苏州街桔子 ，可以通过分词后 苏州街 查到 1、2，通过 桔子 查到 2，然后再进行取交取并等操作得到最终结果。\n在ES中，索引（库）被分为多个分片，每个分片是一个Lucene的索引。所以一个ES索引是由多个Lucene索引组成的\nIK分词器 #\r1. 配置 #\r下载网址：https://github.com/medcl/elasticsearch-analysis-ik/releases\n新建文件夹“ik”，放到es的plugin文件夹中，将文件解压到ik里\n重启es\n可以通过elasticsearch-plugin list命令查看加载的插件\n2. 测试 #\r有两种模式：ik_smart(最少切分) 和 ik_max_word(最细粒度划分)\nGET _analyze\r{\r\u0026quot;analyzer\u0026quot;: \u0026quot;ik_smart\u0026quot;,\r\u0026quot;text\u0026quot;: \u0026quot;中国共产党\u0026quot;\r}\r//结果\r{\r\u0026quot;tokens\u0026quot; : [\r{\r\u0026quot;token\u0026quot; : \u0026quot;中国共产党\u0026quot;,\r\u0026quot;start_offset\u0026quot; : 0,\r\u0026quot;end_offset\u0026quot; : 5,\r\u0026quot;type\u0026quot; : \u0026quot;CN_WORD\u0026quot;,\r\u0026quot;position\u0026quot; : 0\r}\r]\r}\rGET _analyze\r{\r\u0026quot;analyzer\u0026quot;: \u0026quot;ik_max_word\u0026quot;,\r\u0026quot;text\u0026quot;: \u0026quot;中国共产党\u0026quot;\r}\r//结果\r{\r\u0026quot;tokens\u0026quot; : [\r{\r\u0026quot;token\u0026quot; : \u0026quot;中国共产党\u0026quot;,\r\u0026quot;position\u0026quot; : 0\r},\r{\r\u0026quot;token\u0026quot; : \u0026quot;中国\u0026quot;,\r\u0026quot;position\u0026quot; : 1\r},\r{\r\u0026quot;token\u0026quot; : \u0026quot;国共\u0026quot;,\r\u0026quot;position\u0026quot; : 2\r},\r{\r\u0026quot;token\u0026quot; : \u0026quot;共产党\u0026quot;,\r\u0026quot;position\u0026quot; : 3\r},\r{\r\u0026quot;token\u0026quot; : \u0026quot;共产\u0026quot;,\r\u0026quot;position\u0026quot; : 4\r},\r{\r\u0026quot;token\u0026quot; : \u0026quot;党\u0026quot;,\r\u0026quot;position\u0026quot; : 5\r}\r]\r}\r3. 添加自定义词汇到词典中 #\relasticsearch/plugins/ik/config/IKAnalyzer.cfg.xml\n\u0026lt;properties\u0026gt;\r\u0026lt;comment\u0026gt;IK Analyzer 扩展配置\u0026lt;/comment\u0026gt;\r\u0026lt;!--用户可以在这里配置自己的扩展字典 --\u0026gt;\r\u0026lt;entry key=\u0026quot;ext_dict\u0026quot;\u0026gt;herb_names.dic\u0026lt;/entry\u0026gt;\r\u0026lt;!--用户可以在这里配置自己的扩展停止词字典--\u0026gt;\r\u0026lt;entry key=\u0026quot;ext_stopwords\u0026quot;\u0026gt;\u0026lt;/entry\u0026gt;\r\u0026lt;/properties\u0026gt;\relasticsearch/plugins/ik/config/herb_names.dic\n麻黄\r桂枝\r荆芥\r...\rREST风格操作 #\r基本Rest命令说明\nmethod url地址 描述 PUT（创建,修改） localhost:9200/索引名称/类型名称/文档id 创建文档（指定文档id） POST（创建） localhost:9200/索引名称/类型名称 创建文档（随机文档id） POST（修改） localhost:9200/索引名称/类型名称/文档id/_update 修改文档 DELETE（删除） localhost:9200/索引名称/类型名称/文档id 删除文档 GET（查询） localhost:9200/索引名称/类型名称/文档id 查询文档通过文档ID POST（查询） localhost:9200/索引名称/类型名称/文档id/_search 查询所有数据 测试\n1. 创建索引 #\rDeprecation: [types removal] Specifying types in document index requests is deprecated, use the typeless endpoints instead (/{index}/doc/{id}, /{index}/doc, or /{index}/_create/{id}).\n//已弃用方式：\rPUT /test1/type1/1\r{\r\u0026quot;name\u0026quot; : \u0026quot;流柚\u0026quot;,\r\u0026quot;age\u0026quot; : 18\r}\r//替换：\rPUT /test1/_doc/1\r{\r\u0026quot;name\u0026quot;: \u0026quot;流油\u0026quot;,\r\u0026quot;age\u0026quot;: 18\r}\r结果：\n2. 字段数据类型 #\r字符串类型 text、keyword text：支持分词，全文检索,支持模糊、精确查询,不支持聚合,排序操作;text类型的最大支持的字符长度无限制,适合大字段存储； keyword：不进行分词，直接索引、支持模糊、支持精确匹配，支持聚合、排序操作。keyword类型的最大支持的长度为——32766个UTF-8类型的字符,可以通过设置ignore_above指定自持字符长度，超过给定长度后的数据将不被索引，无法通过term精确匹配检索返回结果。 数值型 long、Integer、short、byte、double、float、half float、scaled float 日期类型 date te布尔类型 boolean 二进制类型 binary 等等… 3. 指定字段的类型 #\r设置规则\nPUT /test2\r{\r\u0026quot;mappings\u0026quot;: {\r\u0026quot;properties\u0026quot;: {\r\u0026quot;name\u0026quot;: {\r\u0026quot;type\u0026quot;: \u0026quot;text\u0026quot;\r},\r\u0026quot;age\u0026quot;: {\r\u0026quot;type\u0026quot;: \u0026quot;long\u0026quot;\r},\r\u0026quot;birthday\u0026quot;: {\r\u0026quot;type\u0026quot;: \u0026quot;date\u0026quot;\r}\r}\r}\r}\r通过GET获取建立的规则\nGET /test2\r添加数据\nPUT /test2/_doc/1\r{\r\u0026quot;name\u0026quot;: \u0026quot;这里就叫卢本伟广场好了\u0026quot;,\r\u0026quot;age\u0026quot;: 19,\r\u0026quot;birthday\u0026quot;: \u0026quot;2022-12-19\u0026quot;\r}\r如果自己的文档字段没有被指定，那么ElasticSearch就会给我们默认配置字段类型\n扩展：通过GET _cat/xx 可以获取ElasticSearch的当前的很多信息！\nGET _cat/indices\rGET _cat/aliases\rGET _cat/allocation\rGET _cat/count\rGET _cat/fielddata\rGET _cat/health\rGET _cat/indices\rGET _cat/master\rGET _cat/nodeattrs\rGET _cat/nodes\rGET _cat/pending_tasks\rGET _cat/plugins\rGET _cat/recovery\rGET _cat/repositories\rGET _cat/segments\rGET _cat/shards\rGET _cat/snapshots\rGET _cat/tasks\rGET _cat/templates\rGET _cat/thread_pool\r4. 修改 #\r旧的方法（使用put覆盖原来的值）\n版本+1（_version） 但是如果漏掉某个字段没有写，那么更新是没有写的字段 ，会消失 PUT /test2/_doc/1 { \u0026ldquo;name\u0026rdquo;: \u0026ldquo;这里就叫卢本伟广场\u0026rdquo;, \u0026ldquo;birthday\u0026rdquo;: \u0026ldquo;2022-12-19\u0026rdquo; }\nes-head中对应记录的age字段消失\n新的方法（使用post的update）\nversion不会改变 需要注意doc 不会丢失字段 POST /test2/_doc/2/_update { \u0026ldquo;doc\u0026rdquo;: { \u0026ldquo;age\u0026rdquo;: 122, \u0026ldquo;birthday\u0026rdquo;: \u0026ldquo;1919-10-10\u0026rdquo; } }\n没有指定\u0026quot;name\u0026quot;并不会导致他的“name”丢失\n5. 删除 #\r删除索引\rDELETE /test1\r删除文档\rDELETE /test2/_doc/1\r6. 查询 #\r简单查询\nGET /test2/_doc/_search?q=birthday:2022-12-19\n匹配查询\nmatch：匹配（会使用分词器解析（先分析文档，然后进行查询）） _source：过滤字段，即要获取的字段 sort：排序 form、size 分页 GET /test2/_doc/_search (现在不用写_doc，直接GET /test2/_serach 就行) { \u0026ldquo;query\u0026rdquo;: { \u0026ldquo;match\u0026rdquo;: { \u0026ldquo;name\u0026rdquo;: \u0026ldquo;中国饭\u0026rdquo; } }, \u0026ldquo;_source\u0026rdquo;: [ //获取name 和 age \u0026ldquo;name\u0026rdquo;, \u0026ldquo;age\u0026rdquo; ], \u0026ldquo;sort\u0026rdquo;: [ { \u0026ldquo;age\u0026rdquo;: { \u0026ldquo;order\u0026rdquo;: \u0026ldquo;asc\u0026rdquo; } } ], \u0026ldquo;from\u0026rdquo;: 0, //from是第几个开始 不是第几页 \u0026ldquo;size\u0026rdquo;: 15 //一页多少个 }\n匹配的方法与sql的like不同\n多条件查询（bool)\nmust 相当于 and should 相当于 or must_not 相当于 not (... and ...) filter 过滤 GET /test2/_search { \u0026ldquo;query\u0026rdquo;:{ \u0026ldquo;bool\u0026rdquo;: { \u0026ldquo;must\u0026rdquo;: [ { \u0026ldquo;match\u0026rdquo;: { \u0026ldquo;birthday\u0026rdquo;: \u0026ldquo;2022-12-19\u0026rdquo; } } ], \u0026ldquo;should\u0026rdquo;: [ { \u0026ldquo;match\u0026rdquo;: { \u0026ldquo;name\u0026rdquo;: \u0026ldquo;这里就叫卢本伟广场\u0026rdquo; } }, { \u0026ldquo;match\u0026rdquo;: { \u0026ldquo;name\u0026rdquo;: \u0026ldquo;吃\u0026rdquo; } } ], \u0026ldquo;filter\u0026rdquo;: { \u0026ldquo;range\u0026rdquo;: { \u0026ldquo;age\u0026rdquo;: { \u0026ldquo;gte\u0026rdquo;: 0, \u0026ldquo;lte\u0026rdquo;: 120 } } } } } }\n匹配数组\n可以多关键字查（空格隔开）— 匹配字段也是符合的 match 会使用分词器解析（先分析文档，然后进行查询） 搜词 先创建这样的文档\nPUT /test1/_doc/1 {\r\u0026quot;id\u0026quot;: \u0026quot;10001\u0026quot;,\r\u0026quot;name\u0026quot;: \u0026quot;麻黄散\u0026quot;,\r\u0026quot;ingredient\u0026quot;: [\r\u0026quot;当归\u0026quot;, \u0026quot;吴茱萸\u0026quot;, \u0026quot;大黄\u0026quot;\r]\r}\r再进行查询\nGET /test1/_search\r{\r\u0026quot;query\u0026quot;:{\r\u0026quot;match\u0026quot;:{\r\u0026quot;ingredient\u0026quot;:\u0026quot;白术 当归 大黄 仓鼠\u0026quot; //默认将所有结果or起来\r}\r}\r}\r结果\n\u0026quot;hits\u0026quot; : [\r{\r\u0026quot;_id\u0026quot; : \u0026quot;6\u0026quot;,\r\u0026quot;_score\u0026quot; : 4.2601705,\r\u0026quot;_source\u0026quot; : { \u0026quot;id\u0026quot; : \u0026quot;10006\u0026quot;, \u0026quot;name\u0026quot; : \u0026quot;药方6\u0026quot;, \u0026quot;ingredient\u0026quot; : [\u0026quot;当归\u0026quot;,\u0026quot;白术\u0026quot;,\u0026quot;大黄\u0026quot;] }\r},\r{\r\u0026quot;_id\u0026quot; : \u0026quot;1\u0026quot;,\r\u0026quot;_score\u0026quot; : 3.0661612,\r\u0026quot;_source\u0026quot; : { \u0026quot;id\u0026quot; : \u0026quot;10001\u0026quot;, \u0026quot;name\u0026quot; : \u0026quot;麻黄散\u0026quot;, \u0026quot;ingredient\u0026quot; : [\u0026quot;当归\u0026quot;,\u0026quot;吴茱萸\u0026quot;,\u0026quot;大黄\u0026quot;] }\r},\r{\r\u0026quot;_id\u0026quot; : \u0026quot;5\u0026quot;,\r\u0026quot;_score\u0026quot; : 1.7683537,\r\u0026quot;_source\u0026quot; : { \u0026quot;id\u0026quot; : \u0026quot;10005\u0026quot;, \u0026quot;name\u0026quot; : \u0026quot;药方5\u0026quot;, \u0026quot;ingredient\u0026quot; : [\u0026quot;大黄\u0026quot;,\u0026quot;龙胆草\u0026quot;,\u0026quot;木香\u0026quot;] }\r},\r{\r\u0026quot;_id\u0026quot; : \u0026quot;2\u0026quot;,\r\u0026quot;_score\u0026quot; : 1.2978076,\r\u0026quot;_source\u0026quot; : { \u0026quot;id\u0026quot; : \u0026quot;10002\u0026quot;, \u0026quot;name\u0026quot; : \u0026quot;药方2\u0026quot;, \u0026quot;ingredient\u0026quot; : [\u0026quot;百合\u0026quot;,\u0026quot;当归\u0026quot;,\u0026quot;浙贝母\u0026quot;] }\r},\r{\r\u0026quot;_id\u0026quot; : \u0026quot;3\u0026quot;,\r\u0026quot;_score\u0026quot; : 1.1404719,\r\u0026quot;_source\u0026quot; : { \u0026quot;id\u0026quot; : \u0026quot;10003\u0026quot;, \u0026quot;name\u0026quot; : \u0026quot;药方3\u0026quot;, \u0026quot;ingredient\u0026quot; : [\u0026quot;白术\u0026quot;,\u0026quot;百合\u0026quot;] }\r}\r]\r精确查询\nterm 直接通过 倒排索引 指定词条查询 适合查询 number、date、keyword ，不适合text // 精确查询（必须全部都有，而且不可分，即按一个完整的词查询） // term 直接通过 倒排索引 指定的词条 进行精确查找的 GET /test1/_search { \u0026ldquo;query\u0026rdquo;:{ \u0026ldquo;term\u0026rdquo;:{ \u0026ldquo;ingredient\u0026rdquo;: \u0026ldquo;白\u0026rdquo; //这里用白能搜出来，但是白术就搜不出来了，是中文分词的问题 //用match_phrase代替term 或 修改索引中ingredient的analyzer为ik } } }\ntext在查询时会被分词器分析，keyword整体进行查询不分词\n手动指定类型为keyword\nPUT /test3\r{\r\u0026quot;mappings\u0026quot;: {\r\u0026quot;properties\u0026quot;: {\r\u0026quot;name\u0026quot;: { \u0026quot;type\u0026quot;: \u0026quot;text\u0026quot; },\r\u0026quot;id\u0026quot;: { \u0026quot;type\u0026quot;: \u0026quot;long\u0026quot; },\r\u0026quot;ingredient\u0026quot;: { \u0026quot;type\u0026quot;: \u0026quot;keyword\u0026quot; }\r}\r}\r}\r插入数据\nPUT /test3/_doc/1\r{\r\u0026quot;name\u0026quot;: \u0026quot;中药1\u0026quot;,\r\u0026quot;id\u0026quot;: 121,\r\u0026quot;ingredient\u0026quot;: [ \u0026quot;白术\u0026quot;, \u0026quot;当归\u0026quot;, \u0026quot;浙贝母\u0026quot; ]\r}\r查询数据\n//单独查询一个关键词\rGET /test3/_search\r{\r\u0026quot;query\u0026quot;: {\r\u0026quot;term\u0026quot;: {\r\u0026quot;ingredient\u0026quot;: \u0026quot;白术\u0026quot; //白术能查出来，白、白术1查不出来\r}\r}\r}\r//查询多个关键词\r// 1.只要包含里面的其中一个都会被查出来，所有记录score都为1\rGET /test3/_search\r{\r\u0026quot;query\u0026quot;: {\r\u0026quot;terms\u0026quot;: {\r\u0026quot;ingredient\u0026quot;: [\u0026quot;白术\u0026quot;, \u0026quot;麻药\u0026quot;, \u0026quot;的使劲地发\u0026quot;] }\r}\r}\r// 2.需要包含所有指定的词\rGET /test3/_search\r{\r\u0026quot;query\u0026quot;: {\r\u0026quot;bool\u0026quot;: {\r\u0026quot;must\u0026quot;: [\r{ \u0026quot;term\u0026quot;: { \u0026quot;ingredient\u0026quot;: \u0026quot;白术\u0026quot; } },\r{ \u0026quot;term\u0026quot;: { \u0026quot;ingredient\u0026quot;: \u0026quot;麻药\u0026quot; } }\r]\r}\r}\r}\r// 3.包含其中一个就可以，包含的越多score越高\rGET /test3/_search\r{\r\u0026quot;query\u0026quot;: {\r\u0026quot;bool\u0026quot;: {\r\u0026quot;should\u0026quot;: [\r{ \u0026quot;term\u0026quot;: { \u0026quot;ingredient\u0026quot;: \u0026quot;白术\u0026quot; } },\r{ \u0026quot;term\u0026quot;: { \u0026quot;ingredient\u0026quot;: \u0026quot;麻药\u0026quot; } },\r{ \u0026quot;term\u0026quot;: { \u0026quot;ingredient\u0026quot;: \u0026quot;吴恩达\u0026quot; } }\r]\r}\r}\r}\r设置为keyword后，不管查询方式是match还是term，如果不完全相等都不会被查出来，查询”白术“时，“白术1”就查不出来，这是由keyword的性质决定的，不取决于查询的方式。而在之前未指定keyword的例子中，查询 “白术1”、“白魔术” 都是可以查出来的。\n模糊查询\nwildcard 查询条件分词模糊查询 regexp 正则查询 prefix 前缀查询 GET /test3/_search { \u0026ldquo;query\u0026rdquo;: { \u0026ldquo;wildcard\u0026rdquo;: { \u0026ldquo;ingredient\u0026rdquo;: \u0026ldquo;白*\u0026rdquo; //查出白 白术 白术1 白芷 } } } GET /test3/_search { \u0026ldquo;query\u0026rdquo;: { \u0026ldquo;wildcard\u0026rdquo;: { \u0026ldquo;ingredient\u0026rdquo;: \u0026ldquo;白??\u0026rdquo; //查出白术1 } } }\n不要在搜索字段的前面加通配符，不然会像数据库一样扫描一遍整个表去匹配数据\n7. 高亮 #\r可以设置高亮，让查询到的字词凸显出来\nGET /test1/_search\r{\r\u0026quot;query\u0026quot;:{\r\u0026quot;match\u0026quot;:{\r\u0026quot;ingredient\u0026quot;:\u0026quot;白术 当归\u0026quot;\r}\r},\r\u0026quot;highlight\u0026quot;: {\r\u0026quot;pre_tags\u0026quot;: \u0026quot;\u0026lt;span class='key'\u0026gt;\u0026quot;, //指定前缀 默认\u0026lt;em\u0026gt;\r\u0026quot;post_tags\u0026quot;: \u0026quot;\u0026lt;/span\u0026gt;\u0026quot;, //指定后缀 默认\u0026lt;/em\u0026gt;\r\u0026quot;fields\u0026quot;: {\r\u0026quot;ingredient\u0026quot;: {}\t//指定高亮字段\r}\r}\r}\r结果\n{\r\u0026quot;_id\u0026quot; : \u0026quot;6\u0026quot;,\r\u0026quot;_score\u0026quot; : 2.3712473,\r\u0026quot;_source\u0026quot; : {\r\u0026quot;id\u0026quot; : \u0026quot;10006\u0026quot;,\r\u0026quot;name\u0026quot; : \u0026quot;药方6\u0026quot;,\r\u0026quot;ingredient\u0026quot; : [ \u0026quot;当归\u0026quot;, \u0026quot;白术\u0026quot;, \u0026quot;大黄\u0026quot; ]\r},\r\u0026quot;highlight\u0026quot; : {\r\u0026quot;ingredient\u0026quot; : [\r\u0026quot;\u0026lt;span class='key'\u0026gt;当\u0026lt;/span\u0026gt;\u0026lt;span class='key'\u0026gt;归\u0026lt;/span\u0026gt;\u0026quot;,\r\u0026quot;\u0026lt;span class='key'\u0026gt;白\u0026lt;/span\u0026gt;\u0026lt;span class='key'\u0026gt;术\u0026lt;/span\u0026gt;\u0026quot;\r]\r}\r}\r8. 最小匹配度 #\r当输入一串很长的文本，使用match对其进行搜索时，会搜出来一大堆不相关的东西。\n比如输入 “福曦堂 四川白芍 生白芍 白芍片 芍药 中药材 可磨白芍粉也可搭配川芎 当归使用 精选货 白芍250克*1罐 福曦堂 四川白芍 生白芍 白芍片 芍药 中药材 可磨白芍粉也可搭配川芎 当归使用 精选货 白芍”，搜索结果：\n\u0026quot;hits\u0026quot; : {\r\u0026quot;total\u0026quot; : {\r\u0026quot;value\u0026quot; : 263, // 搜到了好多没用的\r\u0026quot;relation\u0026quot; : \u0026quot;eq\u0026quot;\r},\r\u0026quot;max_score\u0026quot; : 229.36502,\r\u0026quot;hits\u0026quot; : [\r...\r]\r} highlight一下看一下那些不相关的他怎么匹配的\n所以我们使用minimum_should_match来过滤一些无关内容。\n当搜索“Sip on La Croix”时，分词器会将其解析成：\n{ \u0026quot;bool\u0026quot;: { \u0026quot;should\u0026quot;: [ { \u0026quot;term\u0026quot;: { \u0026quot;body\u0026quot;: \u0026quot;Sip\u0026quot;}}, { \u0026quot;term\u0026quot;: { \u0026quot;body\u0026quot;: \u0026quot;on\u0026quot;}}, { \u0026quot;term\u0026quot;: { \u0026quot;body\u0026quot;: \u0026quot;La\u0026quot;}},\r{ \u0026quot;term\u0026quot;: { \u0026quot;body\u0026quot;: \u0026quot;Croix\u0026quot;}},\r]\r} } 当我们指定minimum_should_match后，他会根据你指定的值来进行结果的筛选。具体如下图\n使用\nGET /goods-temp/_search {\r\u0026quot;query\u0026quot;: {\r\u0026quot;match\u0026quot;: {\r\u0026quot;title\u0026quot;: {\r\u0026quot;query\u0026quot;: \u0026quot;福曦堂 四川白芍 生白芍 白芍片 芍药 中药材 可磨白芍粉也可搭配川芎 当归使用 精选货 白芍250克*1罐 福曦堂 四川白芍 生白芍 白芍片 芍药 中药材 可磨白芍粉也可搭配川芎 当归使用 精选货 白芍\u0026quot;,\r\u0026quot;minimum_should_match\u0026quot;: \u0026quot;4\u0026lt;40%\u0026quot;\r}\r}\r}\r}\r//结果\r\u0026quot;hits\u0026quot; : {\r\u0026quot;total\u0026quot; : {\r\u0026quot;value\u0026quot; : 7,\r\u0026quot;relation\u0026quot; : \u0026quot;eq\u0026quot;\r},\r\u0026quot;max_score\u0026quot; : 229.36502,\r\u0026quot;hits\u0026quot; : [\r{\r\u0026quot;_score\u0026quot; : 229.36502,\r\u0026quot;_source\u0026quot; : { \u0026quot;title\u0026quot; : \u0026quot;福曦堂 四川白芍 生白芍 白芍片 芍药 中药材 可磨白芍粉也可搭配川芎 当归使用 精选货 白芍250克*1罐 福曦堂 四川白芍 生白芍 白芍片 芍药 中药材 可磨白芍粉也可搭配川芎 当归使用 精选货 白芍250克*1罐\u0026quot; }\r},\r{\r\u0026quot;_score\u0026quot; : 67.59854,\r\u0026quot;_source\u0026quot; : { \u0026quot;title\u0026quot; : \u0026quot;京东超市 福东海 川芎片250克/袋 中药材当归白芍川芎粉熟地四物汤原料川穹 川芎茶 【五一秒杀特惠,2件9折】宁夏原产红枸杞500克2件到手均件价35.9元！上浮率92%以上,大颗足干,新鲜无硫，活动时间:5月2日20点-3日20点点击\u0026quot; }\r},\r{\r\u0026quot;_score\u0026quot; : 67.06959,\r\u0026quot;_source\u0026quot; : { \u0026quot;title\u0026quot; : \u0026quot;福曦堂土茯苓 四川土茯苓 中药材 土茯苓干货 精选货 土茯苓500克*1袋 福曦堂土茯苓 四川土茯苓 中药材 土茯苓干货 精选货 土茯苓500克*1袋\u0026quot; }\r},\r{ \u0026quot;_score\u0026quot; : 62.90972,\r\u0026quot;_source\u0026quot; : { \u0026quot;title\u0026quot; : \u0026quot;北京同仁堂四物汤膏搭四物汤中药材颗粒汤包四君子汤搭当归白芍川芎熟地黄八珍膏补f气血不足月经不调怡福寿 1支装 北京同仁堂四物汤膏搭四物汤中药材颗粒汤包四君子汤搭当归白芍川芎熟地黄八珍膏补f气血不足月经不调怡福寿 1支装\u0026quot; }\r},\r{\r\u0026quot;_score\u0026quot; : 58.995457,\r\u0026quot;_source\u0026quot; : { \u0026quot;title\u0026quot; : \u0026quot;福曦堂沙苑子 沙苑蒺藜 沙菀子潼蒺藜可代磨沙苑子粉 中药材 沙苑子250克*1罐 福曦堂沙苑子 沙苑蒺藜 沙菀子潼蒺藜可代磨沙苑子粉 中药材 沙苑子250克*1罐\u0026quot; }\r},\r{ \u0026quot;_score\u0026quot; : 55.16248,\r\u0026quot;_source\u0026quot; : { \u0026quot;title\u0026quot; : \u0026quot;福东海四物汤中药材当归熟地黄川穹白芍四物汤原料 4袋*10包（共400g） 超值特惠全店所有商品2件9折，活动时间4月26日-5月5日。热销产品买二送一···\u0026quot; }\r},\r{ \u0026quot;_score\u0026quot; : 49.526695,\r\u0026quot;_source\u0026quot; : { \u0026quot;title\u0026quot; : \u0026quot;世斛堂 生何首乌片 四川何首乌中药材切片何首乌干片精选可泡水煮粥煲汤 何首乌-1000克 精选正品原料，保证质量售后，让购买放心无忧。\u0026quot; }\r}\r]\r}\r不过没有达到我想要的效果，以后再研究。\n集成SpringBoot #\rSpringBoot: 2.2.1.RELEASE\nElasticSearch: 7.6.2\n1. 创建空Maven项目，指定es的version #\r\u0026lt;!-- pom.xml --\u0026gt;\r\u0026lt;properties\u0026gt;\r\u0026lt;java.version\u0026gt;8\u0026lt;/java.version\u0026gt;\r\u0026lt;elasticsearch.version\u0026gt;7.6.2\u0026lt;/elasticsearch.version\u0026gt;\r\u0026lt;/properties\u0026gt;\r2. 依赖 #\r\u0026lt;dependencies\u0026gt;\r\u0026lt;dependency\u0026gt;\r\u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt;\r\u0026lt;artifactId\u0026gt;spring-boot-starter-web\u0026lt;/artifactId\u0026gt;\r\u0026lt;/dependency\u0026gt;\r\u0026lt;dependency\u0026gt;\r\u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt;\r\u0026lt;artifactId\u0026gt;spring-boot-starter-data-elasticsearch\u0026lt;/artifactId\u0026gt;\r\u0026lt;/dependency\u0026gt;\r\u0026lt;dependency\u0026gt;\r\u0026lt;groupId\u0026gt;com.alibaba\u0026lt;/groupId\u0026gt;\r\u0026lt;artifactId\u0026gt;fastjson\u0026lt;/artifactId\u0026gt;\r\u0026lt;version\u0026gt;1.2.79\u0026lt;/version\u0026gt;\r\u0026lt;/dependency\u0026gt;\r\u0026lt;dependency\u0026gt;\r\u0026lt;groupId\u0026gt;org.projectlombok\u0026lt;/groupId\u0026gt;\r\u0026lt;artifactId\u0026gt;lombok\u0026lt;/artifactId\u0026gt;\r\u0026lt;/dependency\u0026gt;\r\u0026lt;/dependencies\u0026gt;\r3. 配置ElasticSearchClientConfig配置类，添加Bean #\r@Configuration\rpublic class ElasticSearchClientConfig {\r@Bean\rpublic RestHighLevelClient restHighLevelClient() {\rRestHighLevelClient client = new RestHighLevelClient(\rRestClient.builder(\rnew HttpHost(\u0026quot;localhost\u0026quot;, 9200, \u0026quot;http\u0026quot;)\r)\r);\rreturn client;\r}\r}\r4. 创建实体类 #\r@Data\r@NoArgsConstructor\r@AllArgsConstructor\rpublic class Prescription implements Serializable {\rprivate static final long serialVersionUID = 1L;\rprivate Long id;\rprivate String name;\rprivate List\u0026lt;String\u0026gt; ingredient;\r}\r5. 测试 #\r注入RestHighLevelClient\n@Autowired\rprivate RestHighLevelClient client;\r1. 测试索引 #\r创建索引\n@Test\rpublic void createIndex() throws IOException {\r//配置索引\rCreateIndexRequest request = new CreateIndexRequest(\u0026quot;test4\u0026quot;);\rCreateIndexResponse response = client.indices().create(request, RequestOptions.DEFAULT);\rSystem.out.println(\u0026quot;是否创建成功:\u0026quot; + response.isAcknowledged());\rSystem.out.println(\u0026quot;返回对象:\u0026quot; + response);\rclient.close();\r}\r获取索引\n@Test\rpublic void queryIndex() throws IOException {\rGetIndexRequest request = new GetIndexRequest(\u0026quot;test4\u0026quot;);\r//是否存在：client.indices().exists(request, RequestOptions.DEFAULT);\rGetIndexResponse response = client.indices().get(request, RequestOptions.DEFAULT);\rSystem.out.println(response);\rclient.close();\r}\r删除索引\n@Test\rpublic void deleteIndex() throws IOException {\rDeleteIndexRequest request = new DeleteIndexRequest(\u0026quot;test4\u0026quot;);\rAcknowledgedResponse response = client.indices().delete(request, RequestOptions.DEFAULT);\rSystem.out.println(response);\rclient.close();\r}\r2. 文档操作 #\r添加文档\n添加单条记录\n@Test public void addDocument() throws IOException { Prescription prescription = new Prescription(); prescription.setId(10009L); prescription.setName(\u0026ldquo;麻黄散他爹\u0026rdquo;); List list = new ArrayList\u0026lt;\u0026gt;(); list.add(\u0026ldquo;当归\u0026rdquo;); list.add(\u0026ldquo;人参\u0026rdquo;); list.add(\u0026ldquo;阿胶\u0026rdquo;); prescription.setIngredient(list);\nIndexRequest request = new IndexRequest(\u0026quot;test3\u0026quot;); //Index\rrequest.id(\u0026quot;9\u0026quot;);\rrequest.timeout(TimeValue.timeValueMillis(2000));\rrequest.source(JSON.toJSONString(prescription), XContentType.JSON);\rIndexResponse response = client.index(request, RequestOptions.DEFAULT);\rSystem.out.println(response.status());\rclient.close();\r}\n添加多条记录\n@Test public void addDocumentBatch() throws IOException { BulkRequest request = new BulkRequest(\u0026ldquo;test3\u0026rdquo;); //Global Index\nList\u0026lt;Prescription\u0026gt; list = new ArrayList\u0026lt;\u0026gt;();\rlist.add(new Prescription(10L, \u0026quot;10\u0026quot;, null));\rlist.add(new Prescription(11L, \u0026quot;11\u0026quot;, null));\rlist.add(new Prescription(12L, \u0026quot;12\u0026quot;, null));\rlist.add(new Prescription(13L, \u0026quot;13\u0026quot;, null));\rlist.forEach(item -\u0026gt; {\rrequest.add(new IndexRequest()\r.id(item.getId().toString())\r.source(JSON.toJSONString(item), XContentType.JSON));\r});\rBulkResponse response = client.bulk(request, RequestOptions.DEFAULT);\rSystem.out.println(response.status());\rclient.close();\r}\n查找文档\n@Test\rpublic void getDocument() throws IOException {\rGetRequest request = new GetRequest(\u0026quot;test3\u0026quot;, \u0026quot;9\u0026quot;);\rGetResponse response = client.get(request, RequestOptions.DEFAULT);\rSystem.out.println(response.getSourceAsString());\rclient.close();\r}\r更新文档\n@Test\rpublic void updateDocument() throws IOException {\rUpdateRequest request = new UpdateRequest(\u0026quot;test3\u0026quot;, \u0026quot;9\u0026quot;);\rPrescription prescription = new Prescription();\r//只对name进行更新,其他字段不会变\rprescription.setName(\u0026quot;卢本伟\u0026quot;);\rrequest.doc(JSON.toJSONString(prescription), XContentType.JSON);\rUpdateResponse response = client.update(request, RequestOptions.DEFAULT);\rSystem.out.println(response);\rSystem.out.println(response.status());\rclient.close();\r}\r删除文档\n@Test\rpublic void deleteDocument() throws IOException {\rDeleteRequest request = new DeleteRequest(\u0026quot;test3\u0026quot;, \u0026quot;9\u0026quot;);\rDeleteResponse response = client.delete(request, RequestOptions.DEFAULT);\rSystem.out.println(response);\rclient.close();\r}\r查询文档\n@Test\rpublic void searchDocument() throws IOException {\rSearchRequest request = new SearchRequest(\u0026quot;test3\u0026quot;);\r//查询条件\rSearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder();\r//Term\rTermQueryBuilder termQueryBuilder = new TermQueryBuilder(\u0026quot;ingredient\u0026quot;, \u0026quot;当归\u0026quot;);\r//Match\rMatchQueryBuilder matchQueryBuilder = new MatchQueryBuilder(\u0026quot;ingredient\u0026quot;, \u0026quot;当归\u0026quot;);\r//HighLight\rHighlightBuilder highlightBuilder = new HighlightBuilder();\rhighlightBuilder.field(\u0026quot;ingredient\u0026quot;);\rsearchSourceBuilder.highlighter(highlightBuilder);\r//Page\rsearchSourceBuilder.from(0);\rsearchSourceBuilder.size(10);\rsearchSourceBuilder.query(termQueryBuilder);\rrequest.source(searchSourceBuilder);\rSearchResponse response = client.search(request, RequestOptions.DEFAULT);\rSystem.out.println(response.getHits().getTotalHits());\rresponse.getHits().forEach(System.out::println);\rclient.close();\r}\r仿京东搜索 #\r1. 解析京东网页获取数据放入ES #\r引入依赖\n\u0026lt;dependency\u0026gt;\r\u0026lt;groupId\u0026gt;org.jsoup\u0026lt;/groupId\u0026gt;\r\u0026lt;artifactId\u0026gt;jsoup\u0026lt;/artifactId\u0026gt;\r\u0026lt;version\u0026gt;1.10.2\u0026lt;/version\u0026gt;\r\u0026lt;/dependency\u0026gt;\r创建HtmlContent类\n@Data\r@NoArgsConstructor\r@AllArgsConstructor\rpublic class HtmlContent implements Serializable {\rprivate String title;\rprivate String price;\rprivate String img;\r}\r解析京东网页\npublic class HtmlParseUtil {\rpublic static List\u0026lt;HtmlContent\u0026gt; parseJD(String keyword, int pageNum) {\rList\u0026lt;HtmlContent\u0026gt; list = new ArrayList\u0026lt;\u0026gt;();\rfor (int i = 1; i \u0026lt;= pageNum; i++) {\rString url = \u0026quot;https://search.jd.com/Search?keyword=#1\u0026amp;enc=utf-8\u0026amp;wq=#1\u0026amp;page=#2\u0026quot;\r.replaceAll(\u0026quot;#1\u0026quot;, keyword)\r.replaceAll(\u0026quot;#2\u0026quot;, String.valueOf(i));\rDocument doc = null;\rtry {\rdoc = Jsoup.parse(new URL(url), 3000);\r} catch (IOException e) {\re.printStackTrace();\r}\rElement goodsList = doc.getElementById(\u0026quot;J_goodsList\u0026quot;);\rElements lis = goodsList.getElementsByTag(\u0026quot;li\u0026quot;);\rfor (Element li : lis) {\rString img = li.getElementsByTag(\u0026quot;img\u0026quot;).eq(0).attr(\u0026quot;data-lazy-img\u0026quot;);\rString price = li.getElementsByClass(\u0026quot;p-price\u0026quot;).eq(0).text();\rString title = li.getElementsByClass(\u0026quot;p-name\u0026quot;).eq(0).text();\rlist.add(new HtmlContent(title, price, img));\r}\r}\rreturn list;\r}\r}\r配置ElasticSearchClientConfig\n@Configuration\rpublic class ElasticSearchClientConfig {\r@Bean\rpublic RestHighLevelClient restHighLevelClient() {\rRestHighLevelClient client = new RestHighLevelClient(RestClient.builder(\rnew HttpHost(\u0026quot;localhost\u0026quot;, 9200, \u0026quot;http\u0026quot;)));\rreturn client;\r}\r}\r创建ContentService\n@Service\rpublic class ContentService {\r@Autowired\rRestHighLevelClient client;\r/**\r* 分析页面，将商品添加到ES中\r* @param keyword 搜索关键词\r* @param pageNum 搜索京东上几页的内容\r* @return\r*/\rpublic Boolean addContent(String keyword, int pageNum) {\rList\u0026lt;HtmlContent\u0026gt; list = HtmlParseUtil.parseJD(keyword, pageNum);\rBulkRequest bulkRequest = new BulkRequest(\u0026quot;goods\u0026quot;);\rlist.forEach(content -\u0026gt; {\rbulkRequest.add(new IndexRequest()\r.source(JSON.toJSONString(content), XContentType.JSON));\r});\rtry {\rBulkResponse response = client.bulk(bulkRequest, RequestOptions.DEFAULT);\rreturn !response.hasFailures();\r} catch (IOException e) {\re.printStackTrace();\rreturn false;\r}\r}\r}\r创建ContentController\n@RestController\rpublic class ContentController {\r@Autowired\rContentService contentService;\r@GetMapping(\u0026quot;/add/{keyword}/{pageNum}\u0026quot;)\rpublic R addContent(@PathVariable String keyword, @PathVariable Integer pageNum) {\rSystem.out.println(\u0026quot;keyword: \u0026quot; + keyword + \u0026quot;, pageNum:\u0026quot; + pageNum);\rBoolean flag = contentService.addContent(keyword, pageNum);\rreturn flag ? R.ok() : R.error();\r}\r}\r2. 搜索功能实现 #\rService\n/**\r* 检索功能\r* @param keyword 搜索的关键词\r* @param pageNo 第几页 最小为0\r* @param pageSize 一页几个\r* @param searchForContent 用于搜索框提示输入还是用于在页面上展示商品\r* @return\r*/\rpublic Map\u0026lt;String, Object\u0026gt; search(String keyword, Integer pageNo, Integer pageSize, Boolean searchForContent) {\rSearchRequest request = new SearchRequest(\u0026quot;goods\u0026quot;);\rSearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder();\rif (!searchForContent) { //搜索框提示输入\r//只需要获取title\rsearchSourceBuilder.fetchSource(\u0026quot;title\u0026quot;, null);\rBoolQueryBuilder boolQueryBuilder = new BoolQueryBuilder();\rString[] keywords = keyword.split(\u0026quot; \u0026quot;);\rfor (String word : keywords) {\rboolQueryBuilder.must(new MatchPhraseQueryBuilder(\u0026quot;title\u0026quot;, word));\r}\rsearchSourceBuilder.query(boolQueryBuilder);\r} else {\rMatchQueryBuilder matchQueryBuilder = new MatchQueryBuilder(\u0026quot;title\u0026quot;, keyword);\rmatchQueryBuilder.minimumShouldMatch(\u0026quot;2\u0026lt;50%\u0026quot;);\rsearchSourceBuilder.query(matchQueryBuilder);\r}\rsearchSourceBuilder.from(pageNo * pageSize);\rsearchSourceBuilder.size(pageSize);\rsearchSourceBuilder.highlighter(new HighlightBuilder()\r.field(\u0026quot;title\u0026quot;)\r.preTags(\u0026quot;\u0026lt;p class=\\\u0026quot;highlight\\\u0026quot;\u0026gt;\u0026quot;)\r.postTags(\u0026quot;\u0026lt;/p\u0026gt;\u0026quot;));\rrequest.source(searchSourceBuilder);\rtry {\rSearchResponse response = client.search(request, RequestOptions.DEFAULT);\rMap\u0026lt;String, Object\u0026gt; result = new HashMap\u0026lt;\u0026gt;();\rList\u0026lt;Map\u0026lt;String, Object\u0026gt;\u0026gt; list = new ArrayList\u0026lt;\u0026gt;();\rresponse.getHits().forEach(item -\u0026gt; {\rMap\u0026lt;String, Object\u0026gt; map = item.getSourceAsMap();\r// 返回文本设置高亮\rMap\u0026lt;String, HighlightField\u0026gt; highlight = item.getHighlightFields();\rHighlightField name = highlight.get(\u0026quot;title\u0026quot;);\rif (name != null){\rText[] fragments = name.fragments();\rStringBuilder new_name = new StringBuilder();\rfor (Text text : fragments) {\rnew_name.append(text);\r}\rmap.put(\u0026quot;title\u0026quot;, new_name.toString());\r}\rlist.add(map);\r});\rresult.put(\u0026quot;total\u0026quot;, response.getHits().getTotalHits().value);\rresult.put(\u0026quot;list\u0026quot;, list);\rreturn result;\r} catch (IOException e) {\re.printStackTrace();\rreturn null;\r}\r}\rController\n@GetMapping(\u0026quot;search/{keyword}/{pageNo}/{pageSize}\u0026quot;)\rpublic R search(@PathVariable String keyword, @PathVariable Integer pageNo, @PathVariable Integer pageSize) {\rreturn R.ok().data(contentService.search(keyword, pageNo, pageSize, true));\r}\r@GetMapping(\u0026quot;searchList/{keyword}/{pageSize}\u0026quot;)\rpublic R searchList(@PathVariable String keyword, @PathVariable Integer pageSize) {\rreturn R.ok().data(contentService.search(keyword, 0, pageSize, false));\r}\r3. 前端页面 #\r引入js文件\n写Html\n\u0026lt;html lang=\u0026quot;en\u0026quot; xmlns:th=\u0026quot;http://www.thymeleaf.org\u0026quot;\u0026gt;\r\u0026lt;head\u0026gt;\r\u0026lt;script src=\u0026quot;/js/vue.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt;\r\u0026lt;script src=\u0026quot;/js/axios.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt;\r\u0026lt;script src=\u0026quot;/js/jquery.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt;\r\u0026lt;style\u0026gt;\rbody {\rmargin: 0;\rpadding: 0;\r}\r.nav {\rwidth: 700px;\rmargin: 20px auto;\rposition: relative;\r}\r.nav input {\routline: none;\rmargin: 0;\rbox-sizing: border-box;\rwidth: 70%;\rheight: 50px;\rfont-size: 22px;\rdisplay: inline-block;\rvertical-align: bottom;\rborder: 4px solid rgb(255, 0, 0)\r}\r.nav button {\rmargin-left: -5px;\rwidth: 15%;\rheight: 50px;\rbox-sizing: border-box;\rdisplay: inline-block;\rvertical-align: bottom;\rfont-size: 18px;\rbackground: rgb(255, 0, 0);\rcolor: white;\r}\r.nav ul {\rposition: absolute;\rtop: 50px;\rleft: 0;\rwidth: 595px;\rbackground: white;\rbox-sizing: border-box;\rborder: 1px solid black;\rpadding: 0;\rmargin: 0;\r}\r.nav li {\rlist-style: none;\rborder-bottom: 1px solid grey;\rtext-overflow: ellipsis;\rword-break: break-all;\rwhite-space: nowrap;\roverflow: hidden;\rmargin: 0 5px;\rheight: 40px;\rline-height: 40px;\rfont-size: 18px;\rtransition: .2s;\rcursor: pointer;\r}\r.nav li:hover {\rbackground: rgb(230, 230, 230);\r}\r.nav li .highlight {\rcolor: red;\rdisplay: inline;\r}\r.nav li p {\rmargin: 0;\r}\r.main {\rwidth: 90%;\rmargin: 20px auto;\rdisplay: flex;\rjustify-content: left;\rflex-wrap: wrap;\r}\r.box {\rborder: 1px solid white;\rwidth: 230px;\rheight: 300px;\rmargin: 5px;\rbox-sizing: border-box;\rtransition: .3s;\r}\r.box:hover {\rbox-shadow: 0px 0px 8px gray;\r}\r.box img {\rwidth: 220px;\rmargin-left: 5px;\r}\r.price {\rcolor: rgb(255, 31, 38);\rfont-size: 20px;\rfont-weight: 550;\rmargin: 0 10px;\r}\r.title {\rmargin: 0 5px;\rdisplay: -webkit-box;\r-webkit-box-orient: vertical;\r-webkit-line-clamp: 2;\roverflow: hidden;\r}\r.title p {\rdisplay: inline;\r}\r.title .highlight {\rcolor: red;\r}\r.footer {\rwidth: 50%;\rmargin: 20px auto;\rdisplay: flex;\rjustify-content: center;\r}\r\u0026lt;/style\u0026gt;\r\u0026lt;/head\u0026gt;\r\u0026lt;body\u0026gt;\r\u0026lt;div id=\u0026quot;app\u0026quot;\u0026gt;\r\u0026lt;div class=\u0026quot;nav\u0026quot;\u0026gt;\r\u0026lt;input type=\u0026quot;text\u0026quot; id=\u0026quot;search\u0026quot; v-model=\u0026quot;keyword\u0026quot;\r@focusin=\u0026quot;showSearchList\u0026quot;\r@focusout=\u0026quot;() =\u0026gt; {if(!this.focus)this.searchListVisible=false}\u0026quot;\r@keyup=\u0026quot;handleKeyUp\u0026quot;\r\u0026gt;\r\u0026lt;button @click=\u0026quot;search(1)\u0026quot;\u0026gt;搜索\u0026lt;/button\u0026gt;\r\u0026lt;ul v-show=\u0026quot;searchListVisible\u0026amp;\u0026amp;this.keyword\u0026quot; @mouseenter=\u0026quot;()=\u0026gt;{this.focus=true}\u0026quot; @mouseleave=\u0026quot;()=\u0026gt;{this.focus=false}\u0026quot;\u0026gt;\r\u0026lt;li v-for=\u0026quot;item in searchList\u0026quot; v-html=\u0026quot;item.title\u0026quot; @click=\u0026quot;setKeyword(item.title)\u0026quot;\u0026gt;\u0026lt;/li\u0026gt;\r\u0026lt;/ul\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;h1 style=\u0026quot;text-align:center;margin-top:150px\u0026quot; v-if=\u0026quot;!list[0]\u0026quot;\u0026gt;暂无数据\u0026lt;/h1\u0026gt;\r\u0026lt;div class=\u0026quot;main\u0026quot;\u0026gt;\r\u0026lt;div class=\u0026quot;box\u0026quot; v-for=\u0026quot;goods in list\u0026quot;\u0026gt;\r\u0026lt;img v-bind:src=\u0026quot;goods.img\u0026quot;\u0026gt;\r\u0026lt;p class=\u0026quot;price\u0026quot; v-text=\u0026quot;goods.price\u0026quot;\u0026gt;￥122\u0026lt;/p\u0026gt;\r\u0026lt;p class=\u0026quot;title\u0026quot; v-bind:title=\u0026quot;goods.title.replaceAll(/\u0026lt;.*?\u0026gt;/ig,'')\u0026quot; v-html=\u0026quot;goods.title\u0026quot;\u0026gt;标题\u0026lt;/p\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;div class=\u0026quot;footer\u0026quot; v-if=\u0026quot;list[0]\u0026quot;\u0026gt;\r\u0026lt;button @click=\u0026quot;lastPage\u0026quot;\u0026gt;上一页\u0026lt;/button\u0026gt;\r\u0026lt;button v-for=\u0026quot;i in pageNum\u0026quot; @click=\u0026quot;search(i)\u0026quot; :disabled=\u0026quot;i==pageNo\u0026quot;\u0026gt;{{i}}\u0026lt;/button\u0026gt;\r\u0026lt;button @click=\u0026quot;nextPage\u0026quot;\u0026gt;下一页\u0026lt;/button\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;script\u0026gt;\rnew Vue({\rel: '#app',\rdata: {\rkeyword: '',\rpageNo: 0,\rpageSize: 30,\rtotal: 0,\rpageNum: 0,\rlist: [],\rsearchList: [],\rsearchListVisible: false,\rfocus: false,\rcompositionStart: false\r},\rcreated() {\r},\rmounted() {\r$('#search').on('compositionstart', e =\u0026gt; {\rthis.compositionStart = true\r}).on('compositionend', e =\u0026gt; {\rthis.compositionStart = false\rthis.updateSearchList()\r})\r},\rmethods: {\rsearch(pageNo = 1) {\rif (!this.keyword) {\rreturn\r}\rthis.pageNo = pageNo\raxios.get(`search/${this.keyword}/${pageNo-1}/${this.pageSize}`).then(resp =\u0026gt; {\rthis.list = resp.data.data.list\rthis.total = resp.data.data.total\rthis.pageNum = Math.max(Math.floor(this.total / this.pageSize), 1)\rthis.searchListVisible = false\r}).catch(err =\u0026gt; {\rconsole.log(err)\r})\r},\rshowSearchList() {\rif (this.keyword) {\rthis.searchListVisible = true\r}\r},\rupdateSearchList() {\rif (this.keyword) { //有内容 去搜索\rlet pageSize = 10\raxios.get(`searchList/${this.keyword}/${pageSize}`).then(resp =\u0026gt; {\rthis.searchList = resp.data.data.list\rthis.searchListVisible = true\r}).catch(err =\u0026gt; {\rconsole.log(err)\r})\r} else {\rthis.searchList = []\rthis.searchListVisible = false\r}\r},\rhandleKeyUp(e) {\rif (e.keyCode == 13) { // 回车\rthis.search(1)\r} else if (e.keyCode == 8) { // 删除\rthis.updateSearchList()\r} else {\rif (!this.compositionStart) {\rthis.updateSearchList()\r}\r}\r},\rsetKeyword(keyword) {\rthis.keyword = keyword.replaceAll(/\u0026lt;.*?\u0026gt;/ig, '')\rthis.search()\r},\rlastPage() {\rif (this.pageNo \u0026gt; 1) {\rthis.search(this.pageNo - 1)\r}\r},\rnextPage() {\rif (this.pageNo \u0026lt; this.pageNum) {\rthis.search(this.pageNo + 1)\r}\r}\r}\r})\r\u0026lt;/script\u0026gt;\r\u0026lt;/body\u0026gt;\r\u0026lt;/html\u0026gt;\r4. 最终效果 #\r学到了 感谢狂神\n","date":"3 May 2022","externalUrl":null,"permalink":"/blog/posts/java/elasticsearch%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E7%8B%82%E7%A5%9E%E8%AF%B4/","section":"Posts","summary":"ElasicSearch 学习笔记，附带京东搜索商品小demo","title":"ElasticSearch个人学习笔记 狂神说","type":"posts"},{"content":"","date":"3 May 2022","externalUrl":null,"permalink":"/blog/tags/springboot/","section":"Tags","summary":"","title":"Springboot","type":"tags"},{"content":"","date":"11 April 2022","externalUrl":null,"permalink":"/blog/tags/c++/","section":"Tags","summary":"","title":"C++","type":"tags"},{"content":"Protobuf: Protobuf-3.6.1，内容是CMake、vs2017编译后的使用protobuf所需要的lib与protoc.exe，有Debug和Release版本，可以直接使用不用编译了。也包含需要到的头文件\n我把要用的东西都放在gitee里了，不知道你们能不能用。我C++只学到了stl水平，windows mfc的没学，讲的不对的话见谅。Java用的Netty\n例子：\n一、写个message.proto的文件 #\rsyntax = \u0026#34;proto2\u0026#34;; package com.li.cppserver; //java： com.li.cppserver.Message.CppMessage //package Msg; //c++: Msg::CppMessage message CppMessage { required int32 action = 1; optional string username = 2; optional string password = 3; optional bool success = 4; optional bytes content = 5; } 数据类型对照：\nC++给Java发还涉及编码的问题，所以我的content使用了bytes，java生成的.java文件中提供了转码的函数，使用方便多了。\n二、在protoc.exe同级目录下执行cmd命令 #\rC++：\nprotoc.exe --cpp_out=./ message.proto Java：\nprotoc.exe --java_out=./ message.proto C++的会生成两个文件：message.pb.cc和message.pb.h，我们直接复制到工程的头文件目录下。\nJava的直接复制到对应package下，然后引入依赖：\n\u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;com.google.protobuf\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;protobuf-java\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;3.6.1\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; 三、修改项目配置 #\r需要分别配置Release和Debug\n相同配置：\n1、项目 - 属性 - 常规，我的配置如图。\n2、项目 - 属性 - C/C++ - 常规，在“附加包含目录”中添加包含所需头文件的文件夹的路径，就是我仓库里src的路径，你也可以下载官方的，就是图中的这个文件夹。\n不同配置：\n项目 - 属性 - 链接器 - 常规 - 附加库目录中 添加lib所在文件夹的路径，Release配置Release的，Debug配Debug的。\n四、代码中的使用 #\rC++：就酱紫蟀，基本的set，取success属性的时候是message.success()。他这个message需要parse一下，我就不多说了，可以上网搜。\nMsg::CppMessage SocketManager::receive(char * outBuf, int len){ Msg::CppMessage message; message.set_success(false); try{ int\tcharCount; if (socket == INVALID_SOCKET || socket == SOCKET_ERROR) return message; charCount = recv(socket, outBuf, len, 0); if( charCount != SOCKET_ERROR \u0026amp;\u0026amp; charCount \u0026gt; 0) { outBuf[charCount] = \u0026#39;\\0\u0026#39;; } else { return message; } string receiveStr(outBuf, charCount + 1); message.ParseFromString(receiveStr); return message; }catch(ConnException e){ cout\u0026lt;\u0026lt;\u0026#34;error in receive..\u0026#34;\u0026lt;\u0026lt;endl; return message; } }\tJava：非常简单,Encoder是我写的，Decoder是用的netty中的\n//ProtobufEncoder public class ProtobufEncoder extends MessageToByteEncoder\u0026lt;Message.CppMessage\u0026gt; { @Override protected void encode(ChannelHandlerContext channelHandlerContext, Message.CppMessage message, ByteBuf out) throws Exception { byte[] bytes = message.toByteArray(); out.writeBytes(bytes); } } //Initializer @Override protected void initChannel(SocketChannel channel) { ChannelPipeline pipeline = channel.pipeline(); pipeline.addLast(\u0026#34;decoder\u0026#34;, new ProtobufDecoder(Message.CppMessage.getDefaultInstance())); pipeline.addLast(new ProtobufEncoder()); pipeline.addLast(new IdleStateHandler(60, 70, 80)); pipeline.addLast(serverHandler); } //Handler @Slf4j @Component @ChannelHandler.Sharable public class CppServerHandler extends ChannelInboundHandlerAdapter { @Override public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception { Message.CppMessage message = (Message.CppMessage) msg; NioSocketChannel channel = (NioSocketChannel) ctx.channel(); String id = (String) channel.attr(AttributeKey.valueOf(\u0026#34;id\u0026#34;)).get(); log.info(\u0026#34;接收到消息{}\u0026#34;, message.info()); switch (message.getAction()) { case 0: this.register(channel, message); break; case 1: sendMessage(id, message); break; case 2: Message.CppMessage.Builder builder = Message.CppMessage.newBuilder() .setAction(1) .setSuccess(true) .setContent(encode(\u0026#34;[INFO] 服务器获取到心跳\u0026#34;)); ctx.writeAndFlush(builder.build()); break; } } private ByteString encode(String content) { try { return ByteString.copyFrom(content, \u0026#34;GBK\u0026#34;); } catch (UnsupportedEncodingException e) { e.printStackTrace(); } return null; } ... } 希望对你们有用^_^\n","date":"11 April 2022","externalUrl":null,"permalink":"/blog/posts/java/c++%E4%B8%8Ejava-socket%E9%80%9A%E4%BF%A1%E4%BD%BF%E7%94%A8protobuf/","section":"Posts","summary":"C++ 使用 Socket 连接 Java 端的 Netty 服务器","title":"C++与Java Socket通信使用Protobuf","type":"posts"},{"content":"","date":"11 April 2022","externalUrl":null,"permalink":"/blog/tags/netty/","section":"Tags","summary":"","title":"Netty","type":"tags"},{"content":"","date":"11 April 2022","externalUrl":null,"permalink":"/blog/tags/protobuf/","section":"Tags","summary":"","title":"Protobuf","type":"tags"},{"content":"","date":"11 April 2022","externalUrl":null,"permalink":"/blog/tags/socket/","section":"Tags","summary":"","title":"Socket","type":"tags"},{"content":"配置如下\n结果客户端没法正常收到我发的消息。\n然后我突然觉得我知道为什么了。。。\n修改代码看看\n输出：\n可以看出来在进入All Idle的时候我把channel close掉了，之后就没法正常写了。我好sb\nhandlerRemoved函数里就不要让channel传消息了。\n","date":"10 April 2022","externalUrl":null,"permalink":"/blog/posts/java/netty%E5%9C%A8%E5%8A%A0%E5%85%A5%E5%BF%83%E8%B7%B3%E6%9C%BA%E5%88%B6%E5%90%8E%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%94%B6%E4%B8%8D%E5%88%B0%E6%B6%88%E6%81%AF%E4%BA%86/","section":"Posts","summary":"使用 Netty 中心跳时使用错误引发的bug","title":"Netty在加入心跳机制后客户端收不到消息了","type":"posts"},{"content":"首先引入依赖\n\u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.redisson\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;redisson\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;3.16.8\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; 在controller或service里加上这俩成员变量\nprivate RedissonClient client = Redisson.create(); private RRateLimiter limiter = client.getRateLimiter(\u0026#34;limiter\u0026#34;); //他的参数是limiter的名字 自己可以改 我选择在构造函数里对limiter进行设置\nIndexController() { this.limiter.trySetRate(RateType.OVERALL, 1, 5, RateIntervalUnit.SECONDS); //此处参数1，5代表每5秒放入一个令牌 } 使用方式一 limiter.acquire(long numPermits)\n@RequestMapping(\u0026#34;rlimiter\u0026#34;) public String redissonLimiter() { limiter.acquire(1); //此处参数1代表你要取走的令牌数量 return \u0026#34;OK\u0026#34;; } 这种方法在获取到令牌前会一直等待，访问页面先显示OK，点击刷新5秒后才又显示OK。\n**使用方式二 limiter.tryAcquire(long numPermits)** @RequestMapping(\u0026#34;rlimiter\u0026#34;) public String redissonLimiter() { boolean flag = limiter.tryAcquire(1); if (flag) { System.out.println(\u0026#34;开始处理业务\u0026#34;); return \u0026#34;ok\u0026#34;; } else { return \u0026#34;业务繁忙请稍后\u0026#34;; } } 这种方法可以通过flag查看你有没有成功获取到令牌，假设令牌被别人占了你没有获取到，他就会立刻返回不再等了。首次访问页面先显示OK，再一刷新就立刻显示业务繁忙了。\n方式三 limiter.tryAcquire(long timeout, TimeUnit unit)\n@RequestMapping(\u0026#34;rlimiter\u0026#34;) public String redissonLimiter() { boolean flag = limiter.tryAcquire(1500, TimeUnit.MILLISECONDS); if (flag) { System.out.println(\u0026#34;开始处理业务\u0026#34;); return \u0026#34;ok\u0026#34;; } else { return \u0026#34;业务繁忙请稍后\u0026#34;; } } 这种方式会在你请求取令牌时等待timeout时长，也就是1500毫秒，如果在这段时间内获取到了令牌，就返回ok，否则返回业务繁忙。\n配合切面对service限流 #\r引入依赖\n\u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-aop\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; 创建RateLimit注解\n@Target(value = ElementType.METHOD) @Retention(RetentionPolicy.RUNTIME) @Documented public @interface RateLimit { //一次取多少个令牌 long permits(); //获取令牌的超时时间，单位为毫秒 long timeout() default 0; } 创建RateLimiterAspect\n@Aspect @Component public class RateLimiterAspect { RedissonClient client = Redisson.create(); RRateLimiter limiter = client.getRateLimiter(\u0026#34;limiter\u0026#34;); RateLimiterAspect() { //直接规定每秒只有10个令牌 limiter.setRate(RateType.OVERALL, 10, 1, RateIntervalUnit.SECONDS); } @Pointcut(\u0026#34;execution(public * com.li.redislock.service.*.*(..))\u0026#34;) public void pointcut() { } @Around(\u0026#34;pointcut()\u0026#34;) public Object process(ProceedingJoinPoint point) throws Throwable { MethodSignature signature = (MethodSignature) point.getSignature(); //反射看方法上有没有@RateLimit注解 RateLimit rateLimit = signature.getMethod().getAnnotation(RateLimit.class); if (rateLimit == null) { return point.proceed(); } long permits = rateLimit.permits(); long timeout = rateLimit.timeout(); boolean res = limiter.tryAcquire(permits, timeout, TimeUnit.MILLISECONDS); if (!res) { throw new RuntimeException(\u0026#34;业务繁忙等会再来吧\u0026#34;); } return point.proceed(); } } service permits根据不同业务而设定不同数目\n@RateLimit(permits = 7, timeout = 200) public void seckill(String uid, String gid) { System.out.println(\u0026#34;正在为用户\u0026#34; + uid + \u0026#34;抢购商品\u0026#34; + gid); } controller\n@RequestMapping(\u0026#34;seckill\u0026#34;) public String seckill() { try { seckillService.seckill(\u0026#34;u-101\u0026#34;, \u0026#34;g-102\u0026#34;); } catch (Exception e) { return \u0026#34;ERROR: \u0026#34; + e.getMessage(); } return \u0026#34;抢购成功\u0026#34;; } 打开两个页面，都输入localhost:8001/seckill，按刷新后立刻到另一个页面也按刷新\n","date":"25 March 2022","externalUrl":null,"permalink":"/blog/posts/java/springboot%E4%B8%AD%E4%BD%BF%E7%94%A8redisson%E7%9A%84rratelimiter/","section":"Posts","summary":"SpringBoot 中使用 RRateLimiter 进行限流桶限流","title":"Springboot中使用Redisson的RRateLimiter","type":"posts"},{"content":"","date":"23 March 2022","externalUrl":null,"permalink":"/blog/tags/kafka/","section":"Tags","summary":"","title":"Kafka","type":"tags"},{"content":"首先说明，本人之前没用过zookeeper、kafka等，尚硅谷十几个小时的教程实在没有耐心看，现在我也不知道分区、副本之类的概念。用kafka只是听说他比RabbitMQ快，我也是昨天晚上刚使用，下文中若有讲错的地方或者我的理解与它的本质有偏差的地方请包涵。\n此文背景的环境是windows，linux流程也差不多。\n官网下载kafka，选择Binary downloads Apache Kafka 解压在D盘下或者什么地方，注意不要放在桌面等绝对路径太长的地方 打开config中的 zookeeper.properties，自己选择性修改clientPort，不想改也行 修改config中的 server.properties 1.取消 advertised.listeners 注释，修改kafka地址与端口。如果要集群部署，broker.id不能重复，1号机是0，2号机是1这样的。\n2.修改 zookeeper.connect 为你上面zookeeper.properties中配置的地址\n配置好了，尝试开启kafka。 来到bin/windows，shift右键在此处打开cmd，输入 zookeeper-server-start.bat ../../config/zookeeper.properties，等待其启动。(注意你config的路径不要写错)\n启动完再开一个cmd，输入 kafka-server-start.bat ../../config/server.properties。\n如果在此环节出现问题，请查看logs中的日志，面向csdn。\n我遇到的问题是 他显示什么什么路径太长了，问题的原因是我把他放桌面上了。\n新建springboot项目，pom中添加依赖 \u0026lt;dependencies\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-web\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.kafka\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-kafka\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.projectlombok\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;lombok\u0026lt;/artifactId\u0026gt; \u0026lt;optional\u0026gt;true\u0026lt;/optional\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;com.alibaba\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;fastjson\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;1.2.28\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;/dependencies\u0026gt; 配置application.yml，写启动类，controller，创建User类，创建consumer application.yml\nspring: application: name: kafka kafka: bootstrap-servers: localhost:9092 #这个是你server.properties中配置的 producer: key-serializer: org.apache.kafka.common.serialization.StringSerializer value-serializer: org.apache.kafka.common.serialization.StringSerializer consumer: key-deserializer: org.apache.kafka.common.serialization.StringDeserializer value-deserializer: org.apache.kafka.common.serialization.StringDeserializer group-id: test-consumer-group #这个去config/consumer.properties中查看和修改 # 不过好像不一样也不影响？ server: port: 8001 controller\n@RestController public class ProducerController { @Autowired KafkaTemplate\u0026lt;String, String\u0026gt; kafka; @RequestMapping(\u0026#34;register\u0026#34;) public String register(User user) { String message = JSON.toJSONString(user); System.out.println(\u0026#34;接收到用户信息：\u0026#34; + message); kafka.send(\u0026#34;register\u0026#34;, message); //kafka.send(String topic, @Nullable V data) { return \u0026#34;OK\u0026#34;; } } user\n@Data @NoArgsConstructor @AllArgsConstructor public class User implements Serializable { private String id; private String name; private Integer age; } consumer\n@Configuration public class Consumer { @KafkaListener(topics = \u0026#34;register\u0026#34;) public void consume(String message) { System.out.println(\u0026#34;接收到消息：\u0026#34; + message); User user = JSON.parseObject(message, User.class); System.out.println(\u0026#34;正在为 \u0026#34; + user.getName() + \u0026#34; 办理注册业务...\u0026#34;); System.out.println(\u0026#34;注册成功\u0026#34;); } } 此时启动springboot，然而报错了\norg.springframework.context.ApplicationContextException: Failed to start bean \u0026#39;org.springframework.kafka.config.internalKafkaListenerEndpointRegistry\u0026#39;; nested exception is java.lang.IllegalStateException: Topic(s) [register] is/are not present and missingTopicsFatal is true 为什么呢？\n请检查zookeeper和kafka的cmd上有没有他们启动失败的消息，如果有就重新启动下，记得先开zookeeper再开kafka。\n然后确认你的kafka上有没有\u0026quot;register\u0026quot;这个topic，此时我是没有的，而consumer又加了 @KafkaListener(topics = \u0026quot;register\u0026quot;) 注解，于是他就启动失败了。\n有两种解决方式：\n1.比较傻X的方式，先将@KafkaListener注释掉，启动springboot后访问localhost:8001/register，他send的时候就会自行创建topic，再取消注释重新启动就可以了。\n2.cmd方式：输入 kafka-topics.bat --create --bootstrap-server localhost:9092 --replication-factor 1 --partitions 1 --topic register\n然后我们再启动，已经启动成功了。访问 localhost:8001/register?name=JamesBond\u0026amp;age=55\n我们可以看到数据已经成功送到那里了。\n然后来测试一下速度\n@RequestMapping(\u0026#34;test\u0026#34;) public String test() { System.out.println(\u0026#34;发送开始\u0026#34; + System.currentTimeMillis() % 10000); for (int i = 0; i \u0026lt; 1000; i++) { kafka.send(\u0026#34;test\u0026#34;, JSON.toJSONString(new User((1289312+i)+\u0026#34;\u0026#34;, \u0026#34;User\u0026#34; + i, (int)(Math.random() * 100), info))); } System.out.println(\u0026#34;发送结束\u0026#34; + System.currentTimeMillis() % 10000); return \u0026#34;OK\u0026#34;; } @KafkaListener(topics = \u0026#34;test\u0026#34;) public void test(String message) { System.out.println(\u0026#34;--\u0026#34; + System.currentTimeMillis() % 10000 + \u0026#34;--\u0026#34;); } console:\n发送开始1267\r--1384--\r--1384--\r...\r--1715--\r--1715--\r发送结束1715\r--1715--\r--1715--\r...\r--1734--\r对比RabbitMQ：\n发送开始5692\r--5766--\r--5766--\r...\r--5973--\r--5974--\r发送结束5976\r--5977--\r--5977--\r...\r--6456--\rkafka:\n发送结束 - 发送开始=448ms\n接收结束 - 接收开始=350ms\n整体耗时: 467ms\nrabbit:\n发送结束 - 发送开始=284ms\n接收结束 - 接收开始=690ms\n整体耗时: 764ms\nOK既然我会用了 我就去学一下kafka基本知识了\n","date":"23 March 2022","externalUrl":null,"permalink":"/blog/posts/java/springboot%E4%B8%AD%E4%BD%BF%E7%94%A8kafka/","section":"Posts","summary":"SpringBoot 中引入依赖，通过 KafkaTemplate 将 Kafka 作为消息队列使用","title":"Springboot中使用kafka","type":"posts"},{"content":"1.创建AccessLimit注解，second和maxCount用于限流，loginRequired用于判断请求是否需要用户登录\n@Target(ElementType.METHOD)\r@Retention(RetentionPolicy.RUNTIME)\rpublic @interface AccessLimit {\rint second() default 0;\rint maxCount() default 0;\rboolean loginRequired() default true;\r}\r2.实现WebMvcConfigurer 加上Configuration注解 添加放行和拦截 放行自己加\n@Configuration\rpublic class InterceptorConfig implements WebMvcConfigurer {\r@Bean\rpublic MyInterceptor myInterceptor() {\rreturn new MyInterceptor();\r}\r@Override\rpublic void addInterceptors(InterceptorRegistry registry) {\rString[] addPath = {\u0026quot;/**\u0026quot;};\rregistry.addInterceptor(myInterceptor()).addPathPatterns(addPath);\r}\r}\r3.没啥好说的\npublic class MyInterceptor implements HandlerInterceptor {\r@Autowired\rprivate UserService userService;\r@Autowired\rprivate RedisTemplate redisTemplate;\r@Override\rpublic boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {\rif (!(handler instanceof HandlerMethod)) {\rreturn true;\r}\rHandlerMethod handlerMethod = (HandlerMethod) handler;\rMethod method = handlerMethod.getMethod();\rAccessLimit accessLimit = method.getAnnotation(AccessLimit.class);\rReturnPage returnPage = method.getAnnotation(ReturnPage.class);\rif (accessLimit == null) { //无限制\rreturn true;\r}\rValueOperations valueOperations = redisTemplate.opsForValue();\rint second = accessLimit.second();\rint maxCount = accessLimit.maxCount();\rboolean loginRequired = accessLimit.loginRequired();\rif (!loginRequired) { //不需要登录 放行\rreturn true;\r}\rString uid = JwtUtils.getUserIdByJwtToken(request);\rUser user = userService.getById(uid);\rif (user == null) {\rif (returnPage == null) {\rthrow new GlobalException(20002, \u0026quot;操作异常，请重新登录\u0026quot;);\r} else {\rresponse.sendRedirect(\u0026quot;/login\u0026quot;);\rreturn false;\r}\r}\rif (maxCount == 0 || second == 0) { //不限流\rreturn true;\r}\rString uri = request.getRequestURI();\rString key = uri + \u0026quot;::\u0026quot; + uid;\rInteger count = (Integer) valueOperations.get(key);\rif (count == null) {\rvalueOperations.set(key, 1, second, TimeUnit.SECONDS);\r} else if (count \u0026lt; maxCount) {\rvalueOperations.increment(key);\r} else {\rthrow new GlobalException(20001, \u0026quot;操作频繁，请稍后再试\u0026quot;);\r}\rreturn true;\r}\r}\r此时带有@AccessLimit的函数就会被拦截了 比如下面这个\n@AccessLimit\r@ResponseBody\r@PostMapping(\u0026quot;purchase/{id}\u0026quot;)\rpublic R purchaseGoods(@PathVariable String id, Integer num, HttpServletRequest request) {\rString uid = JwtUtils.getUserIdByJwtToken(request);\r.\r.\r.\rreturn R.ok().data(\u0026quot;oid\u0026quot;, order.getId());\r}\r","date":"4 February 2022","externalUrl":null,"permalink":"/blog/posts/java/springboot%E6%8B%A6%E6%88%AA%E5%99%A8%E9%A2%84%E5%A4%84%E7%90%86%E8%AF%B7%E6%B1%82/","section":"Posts","summary":"使用拦截器配合redis实现限流，判断拦截还是放行","title":"springboot拦截器限流请求","type":"posts"},{"content":"","externalUrl":null,"permalink":"/blog/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"},{"content":"","externalUrl":null,"permalink":"/blog/series/","section":"Series","summary":"","title":"Series","type":"series"}]